{"version":3,"sources":["store/settings/settings.actions.js","helpers/csv.js","helpers/utils.js","store/settings/settings.reducer.js","store/index.js","helpers/builder.js","store/settings/settings.selectors.js","components/Stepper.js","pages/Step1.js","pages/Step2.container.js","pages/Step2.js","components/ColumnDropdown/ColumnDropdown.container.js","components/ColumnDropdown/ColumnDropdown.js","components/DisplayPanel/DisplayPanel.js","components/DisplayPanel/DisplayPanel.container.js","components/BuilderTable/BuilderTable.container.js","components/BuilderTable/BuilderTable.js","components/BuilderTable/Settings.js","components/BuilderTable/Settings.container.js","components/BuilderTable/Help.js","components/TabPanel.js","pages/Step3.container.js","pages/Step3.js","pages/Step4.container.js","pages/Step4.js","constants.js","pages/Page.js","pages/Page.container.js","App.js","serviceWorker.js","index.js"],"names":["uploadFile","file","dispatch","Promise","resolve","Papa","parse","complete","data","parseCsv","then","resp","type","payload","uploadedFilename","path","removeArrayItem","arr","value","index","indexOf","splice","initialState","pageIndex","rows","sortedRows","builderTab","format","textIndentNumSpaces","htmlIndentWidth","rowClassPrefix","settingsReducer","state","action","rowId","colIndex","newRowId","nanoid","indent","newSortedRows","newRows","tab","prefix","numSpaces","rootReducer","combineReducers","settings","persistConfig","key","storage","persistedReducer","persistReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","persistor","persistStore","getBuilderLines","rowConfig","generationFormat","lastSeenColValues","lines","row","currIndent","forEach","config","colValue","placeholders","getRowPlaceholders","push","getFormattedCell","VALUE","length","i","errorStr","squirrelly","e","getBuilderContent","rowData","isPreview","content","textSpaces","parseInt","htmlIndent","repeat","cls","getData","getUploadedFilename","getPageIndex","getBuilderTab","getFormat","getTextIndentNumSpaces","getHtmlIndentWidth","getRowClassPrefix","getRowData","createSelector","map","hasUploadedData","getColumns","getPreviewContent","getGeneratedContent","getGeneratedCss","indentWidth","classPrefix","filter","join","Stepper","steps","activeStep","className","label","stepProps","labelProps","completed","Step","StepLabel","Step1","onNext","src","width","height","alt","Button","variant","size","color","onClick","container","connect","selectors","onUploadFile","actions","onReset","onPrev","onDrop","React","useCallback","files","useDropzone","getRootProps","getInputProps","isDragActive","href","target","style","marginRight","minWidth","columns","onChange","defaultValue","columnName","DisplayPanel","dangerouslySetInnerHTML","__html","onAddRow","onDeleteRow","onSelectColumn","onToggleRowIndentation","onUpdateRowFormat","rowFormat","rowElements","rowIndex","columnIndex","checked","id","htmlFor","fontSize","preventDefault","Settings","onChangeFormat","onChangeHtmlIndentWidth","onChangeRowClassPrefix","onChangeTextIndentNumSpaces","Help","rel","TabPanel","children","padding","setBuilderTab","Tabs","indicatorColor","textColor","newValue","Tab","generatedContent","generatedCss","onReturn","useState","setTab","fullPageContent","float","text","disableElevation","startIcon","getContent","theme","createMuiTheme","typography","fontFamily","useStyles","makeStyles","root","flexGrow","menuButton","spacing","title","Page","setPageIndex","classes","ThemeProvider","AppBar","position","Toolbar","Typography","IconButton","aria-label","margin","open","C","App","loading","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef7dec21.chunk.js","sourcesContent":["import { parseCsv } from '../../helpers/csv';\n\nexport const SET_DATA = 'SET_DATA';\nexport const uploadFile = (file) => (dispatch) => {\n    parseCsv(file)\n        .then((resp) => {\n            dispatch({\n                type: SET_DATA,\n                payload: {\n                    uploadedFilename: file.path,\n                    data: resp.data\n                }\n            });\n        })\n};\n\nexport const SET_PAGE_INDEX = 'SET_PAGE_INDEX';\nexport const setPageIndex = (pageIndex) => ({ type: SET_PAGE_INDEX, payload: { pageIndex }});\n\nexport const SELECT_COLUMN = 'SELECT_COLUMN';\nexport const selectColumn = (rowId, colIndex) => ({ type: SELECT_COLUMN, payload: { rowId, colIndex }});\n\nexport const ADD_ROW = 'ADD_ROW';\nexport const addRow = () => ({ type: ADD_ROW });\n\nexport const DELETE_ROW = 'DELETE_ROW';\nexport const deleteRow = (rowId) => ({ type: DELETE_ROW, payload: { rowId }});\n\nexport const TOGGLE_ROW_INDENTATION = 'TOGGLE_ROW_INDENTATION';\nexport const toggleRowIndentation = (rowId) => ({ type: TOGGLE_ROW_INDENTATION, payload: { rowId }});\n\nexport const UPDATE_ROW_FORMAT = 'UPDATE_ROW_FORMAT';\nexport const updateRowFormat = (rowId, format) => ({ type: UPDATE_ROW_FORMAT, payload: { rowId, format }});\n\nexport const SET_BUILDER_TAB = 'SET_BUILDER_TAB';\nexport const setBuilderTab = (tab) => ({ type: SET_BUILDER_TAB, payload: { tab }});\n\nexport const UPDATE_FORMAT = 'UPDATE_FORMAT';\nexport const updateFormat = (format) => ({ type: UPDATE_FORMAT, payload: { format }});\n\nexport const UPDATE_HTML_INDENT_WIDTH = 'UPDATE_HTML_INDENT_WIDTH';\nexport const updateHtmlIndentWidth = (htmlIndentWidth) => ({ type: UPDATE_HTML_INDENT_WIDTH, payload: { htmlIndentWidth }});\n\nexport const UPDATE_ROW_CLASS_PREFIX = 'UPDATE_ROW_CLASS_PREFIX';\nexport const updateRowClassPrefix = (prefix) => ({ type: UPDATE_ROW_CLASS_PREFIX, payload: { prefix }});\n\nexport const UPDATE_TEXT_INDENT_NUM_SPACES = 'UPDATE_TEXT_INDENT_NUM_SPACES';\nexport const updateTextIndentNumSpaces = (numSpaces) => ({ type: UPDATE_TEXT_INDENT_NUM_SPACES, payload: { numSpaces }});\n\nexport const RESET = 'RESET';\nexport const onReset = () => ({ type: 'RESET' });","import Papa from 'papaparse';\n\nexport const parseCsv = (file) => {\n    return new Promise((resolve) => {\n        Papa.parse(file, {\n            complete: (data) => resolve(data)\n        });\n    });\n};\n","export const removeArrayItem = (arr, value) => {\n    var index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}","import { nanoid } from 'nanoid';\nimport * as actions from './settings.actions';\nimport { removeArrayItem } from '../../helpers/utils';\n\nconst initialState = {\n    pageIndex: 0,\n    uploadedFilename: '',\n    data: null,\n    rows: {},\n    sortedRows: [],\n    builderTab: 0,\n    format: \"html\",\n    textIndentNumSpaces: 4,\n    htmlIndentWidth: 50,\n    rowClassPrefix: \"cg-col-\"\n};\n\nconst settingsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.RESET: {\n            return {\n                ...state,\n                data: null,\n                uploadedFilename: '',\n                rows: {},\n                sortedRows: [],\n                builderTab: 0\n            };\n        }\n        case actions.SET_PAGE_INDEX:\n            return {\n                ...state,\n                pageIndex: action.payload.pageIndex\n            };\n        case actions.SET_DATA:\n            return {\n                ...state,\n                uploadedFilename: action.payload.uploadedFilename,\n                data: action.payload.data\n            };\n        case actions.SELECT_COLUMN: {\n            const { rowId, colIndex } = action.payload;\n\n            return {\n                ...state,\n                rows: {\n                    ...state.rows,\n                    [rowId]: {\n                        ...state.rows[rowId],\n                        colIndex: colIndex\n                    }\n                }\n            };\n        }\n        case actions.ADD_ROW:\n            const newRowId = nanoid(6);\n            return {\n                ...state,\n                sortedRows: [\n                    ...state.sortedRows,\n                    newRowId\n                ],\n                rows: {\n                    ...state.rows,\n                    [newRowId]: {\n                        colIndex: null,\n                        indent: true,\n                        format: '{{it.VALUE}}'\n                    }\n                }\n            };\n        case actions.DELETE_ROW: {\n            const newSortedRows = removeArrayItem(state.sortedRows, action.payload.rowId);\n            const newRows = { ...state.rows };\n            delete newRows[action.payload.rowId];\n\n            return {\n                ...state,\n                sortedRows: newSortedRows,\n                rows: newRows\n            };\n        }\n        case actions.TOGGLE_ROW_INDENTATION: {\n            return {\n                ...state,\n                rows: {\n                    ...state.rows,\n                    [action.payload.rowId] : {\n                        ...state.rows[action.payload.rowId],\n                        indent: !state.rows[action.payload.rowId].indent\n                    }\n                }\n            };\n        }\n        case actions.UPDATE_ROW_FORMAT: {\n            const { rowId, format } = action.payload;\n            return {\n                ...state,\n                rows: {\n                    ...state.rows,\n                    [rowId] : {\n                        ...state.rows[rowId],\n                        format\n                    }\n                }\n            }\n        }\n        case actions.SET_BUILDER_TAB: {\n            return {\n                ...state,\n                builderTab: action.payload.tab\n            };\n        }\n        case actions.UPDATE_FORMAT: {\n            return {\n                ...state,\n                format: action.payload.format\n            };\n        }\n        case actions.UPDATE_HTML_INDENT_WIDTH: {\n            return {\n                ...state,\n                htmlIndentWidth: action.payload.htmlIndentWidth\n            };\n        }\n        case actions.UPDATE_ROW_CLASS_PREFIX: {\n            return {\n                ...state,\n                rowClassPrefix: action.payload.prefix\n            };\n        }\n        case actions.UPDATE_TEXT_INDENT_NUM_SPACES: {\n            return {\n                ...state,\n                textIndentNumSpaces: action.payload.numSpaces\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport default settingsReducer;","import Thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage';\nimport settingsReducer from './settings/settings.reducer';\n\nconst rootReducer = combineReducers({\n    settings: settingsReducer\n});\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst store = createStore(\n    persistedReducer,\n    composeEnhancers(\n        applyMiddleware(Thunk)\n    )\n);\n\nconst persistor = persistStore(store);\n\nexport default store;\nexport {\n    persistor\n};\n","import * as squirrelly from 'squirrelly';\n\nexport const getBuilderLines = (data, rowConfig, generationFormat) => {\n    const lastSeenColValues = [];\n    const lines = [];\n\n    for (let row=1; row<data.length; row++) {\n        let currIndent = 0;\n        rowConfig.forEach((config) => {\n            const { colIndex, format, indent } = config; // format\n            const colValue = data[row][colIndex];\n\n            currIndent = (indent) ? currIndent + 1 : currIndent;\n\n            // if we've already output this item, don't add it again\n            if (lastSeenColValues[colIndex] === colValue) {\n                return;\n            }\n\n            const placeholders = getRowPlaceholders(data[row]);\n\n            lines.push({\n                colIndex,\n                value: getFormattedCell(format, { VALUE: colValue, ...placeholders }, generationFormat),\n                indent: currIndent\n            });\n\n            lastSeenColValues[colIndex] = colValue;\n        });\n    }\n\n    return lines;\n};\n\nexport const getRowPlaceholders = (row) => {\n    const placeholders = {};\n    row.forEach((i, index) => {\n        placeholders['COL' + (index+1)] = i;\n    });\n\n    return placeholders;\n};\n\nexport const getFormattedCell = (format, placeholders, generationFormat) => {\n    let errorStr = 'invalid syntax for this row';\n    let value = generationFormat === 'html' ? `<span class=\"invalidRow\">${errorStr}</span>` : `--- ${errorStr} ---`;\n    try {\n        value = squirrelly.render(format, placeholders);\n    } catch (e) {\n        // console.log(\"error parsing: \", e);\n    }\n    return value;\n};\n\nexport const getBuilderContent = (data, rowData, format, textIndentNumSpaces, htmlIndentWidth, rowClassPrefix, isPreview = true) => {\n    const lines = getBuilderLines(data, rowData, format);\n    let content = '';\n\n    const textSpaces = parseInt(textIndentNumSpaces || 0, 10);\n    const htmlIndent = parseInt(htmlIndentWidth || 0, 10);\n\n    // a little inelegant, but for previewing we just generate HTML with the indentation hardcoded. For the actual\n    // generation we generate the final markup with the appropriate CSS separately\n    if (isPreview) {\n        lines.forEach(({ value, indent}) => {\n            if (format === \"html\") {\n                const pxWidth = (indent-1) * htmlIndent;\n                content += `<div style=\"padding-left: ${pxWidth}px\">${value}</div>`;\n            } else {\n                content += ' '.repeat((indent-1)*textSpaces) + value + '\\n';\n            }\n        });\n    } else {\n        lines.forEach(({ value, colIndex, indent }) => {\n            if (format === \"html\") {\n                const cls = `${rowClassPrefix}${colIndex+1} ${rowClassPrefix}indent-${indent}`;\n                content += `<div class=\"${cls}\">${value}</div>\\n`;\n            } else {\n                content += ' '.repeat((indent-1)*textSpaces) + value + '\\n';\n            }\n        });\n    }\n\n    return content;\n};\n","import { createSelector } from 'reselect';\nimport { getBuilderContent } from '../../helpers/builder';\n\nexport const getData = (state) => state.settings.data;\nexport const getUploadedFilename = (state) => state.settings.uploadedFilename;\nexport const getPageIndex = (state) => state.settings.pageIndex;\nexport const getRows = (state) => state.settings.rows;\nexport const getSortedRows = (state) => state.settings.sortedRows;\nexport const getBuilderTab = (state) => state.settings.builderTab;\nexport const getFormat = (state) => state.settings.format;\nexport const getTextIndentNumSpaces = (state) => state.settings.textIndentNumSpaces;\nexport const getHtmlIndentWidth = (state) => state.settings.htmlIndentWidth;\nexport const getRowClassPrefix = (state) => state.settings.rowClassPrefix;\n\nexport const getRowData = createSelector(\n    getSortedRows,\n    getRows,\n    (sortedRows, rows) => {\n        return sortedRows.map((rowId) => {\n            return {\n                ...rows[rowId],\n                rowId\n            };\n        });\n    }\n);\n\nexport const hasUploadedData = createSelector(\n    getData,\n    (data) => data !== null\n);\n\nexport const getColumns = createSelector(\n    getData,\n    (data) => {\n        if (!data.length) {\n            return [];\n        }\n        return data[0];\n    }\n);\n\nexport const getPreviewContent = createSelector(\n    getData,\n    getRowData,\n    getFormat,\n    getTextIndentNumSpaces,\n    getHtmlIndentWidth,\n    (data, rowData, format, textIndentNumSpaces, htmlIndentWidth) => (\n        getBuilderContent(data, rowData, format, textIndentNumSpaces, htmlIndentWidth)\n    )\n);\n\nexport const getGeneratedContent = createSelector(\n    getData,\n    getRowData,\n    getFormat,\n    getTextIndentNumSpaces,\n    getHtmlIndentWidth,\n    getRowClassPrefix,\n    (data, rowData, format, textIndentNumSpaces, htmlIndentWidth, rowClassPrefix) => (\n        getBuilderContent(data, rowData, format, textIndentNumSpaces, htmlIndentWidth, rowClassPrefix, false)\n    )\n);\n\nexport const getGeneratedCss = createSelector(\n    getRowData,\n    getHtmlIndentWidth,\n    getRowClassPrefix,\n    (rowData, indentWidth, classPrefix) => {\n        const lines = [];\n        const indentedRows = rowData.filter(({ indent }) => indent);\n\n        indentedRows.forEach((row, index) => {\n            lines.push(`.${classPrefix}indent-${index+1} { margin-left: ${indentWidth * (index)}px; }`);\n        });\n\n        return lines.join(\"\\n\");\n    }\n);\n","import React from \"react\";\nimport MUIStepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\n\nexport const Stepper = ({ steps, activeStep }) => (\n    <div className=\"navStepper\">\n        <MUIStepper activeStep={activeStep}>\n            {steps.map((label, index) => {\n                const stepProps = {};\n                const labelProps = {};\n                // if (isStepSkipped(index)) {\n                    stepProps.completed = false;\n                // }\n                return (\n                    <Step key={label} {...stepProps}>\n                        <StepLabel {...labelProps}>{label}</StepLabel>\n                    </Step>\n                );\n            })}\n        </MUIStepper>\n    </div>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport const Step1 = ({ onNext }) => (\n    <div>\n        <h1>Checklist Generator</h1>\n\n        <div className=\"introPanel\">\n            <div>\n                <p>\n                    This is a simple, free online tool that <i>takes a CSV file that looks like this...</i>\n                </p>\n                <img src=\"./table.png\" width={415} height={252} alt=\"Original CSV table format example\" />\n            </div>\n            <div>\n                <p>\n                    and <i>converts it to a checklist that looks like this</i>...\n                </p>\n                <img src=\"./checklist.png\" width={230} height={395} alt=\"Generated checklist example\" />\n            </div>\n        </div>\n\n        <h2>Features</h2>\n\n        <ul>\n            <li>Works on any CSV content that has the same format as shown above, where a column has a repeated value for all children.</li>\n            <li>Lets you generate HTML or plain text checklists.</li>\n            <li>Allows you to extract only the data you want to present.</li>\n            <li>Uses a templating language for generating the content, so you can apply logic to output different row values based on your data set,\n            as well as format each row according to whatever rules you want.</li>\n            <li>Stores your settings and data as you progress, so you won't lose anything if you accidentally navigate away.</li>\n        </ul>\n\n        <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={onNext}>Get Started &raquo;</Button>\n    </div>\n);\n","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step2 } from './Step2';\n\nconst mapStateToProps = (state) => ({\n    uploadedFilename: selectors.getUploadedFilename(state),\n    hasUploadedData: selectors.hasUploadedData(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onUploadFile: (file) => dispatch(actions.uploadFile(file)),\n    onReset: () => dispatch(actions.onReset())\n});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Step2);\n\nexport default container;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useDropzone } from 'react-dropzone';\nimport \"./Page2.scss\";\n\nexport const Step2 = ({ onPrev, onNext, uploadedFilename, hasUploadedData, onUploadFile, onReset }) => {\n    const onDrop = React.useCallback((files) => {\n        onUploadFile(files[0]);\n    }, [onUploadFile]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    const getButtons = () => {\n        if (!hasUploadedData) {\n            return null;\n        }\n\n        return (\n            <footer>\n                <Button variant=\"outlined\" size=\"small\" color=\"secondary\" onClick={onPrev} style={{ marginRight: 10, minWidth: 20 }}>&laquo;</Button>\n                <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={onNext}>Continue &raquo;</Button>\n            </footer>\n        );\n    }\n\n    const getContent = () => {\n        if (hasUploadedData) {\n            return (\n                <p>\n                    You have an uploaded file: <b>{uploadedFilename}</b> (data is stored in your browser's local storage). <span className=\"link\" onClick={onReset}>Click here to reset</span> and upload another.\n                </p>\n            );\n        }\n\n        return (\n            <>\n                <div className=\"dragDropUpload\" {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    {\n                        isDragActive ?\n                            <p>Drop the file here ...</p> :\n                            <p>Drag and drop your file here, or click to select a file.</p>\n                    }\n                </div>\n\n                <p>\n                    If you don't have a file on hand, you can use this <a href=\"./demo-data.csv\" target=\"_blank\">demo file</a> that illustrates a typical\n                    compatible format.\n                </p>\n            </>\n        );\n    };\n\n    return (\n        <div>\n            {getContent()}\n            {getButtons()}\n        </div>\n    );\n};\n","import { connect } from 'react-redux';\nimport { ColumnDropdown } from './ColumnDropdown';\nimport * as selectors from '../../store/settings/settings.selectors';\n\nconst mapStateToProps = (state) => ({\n    columns: selectors.getColumns(state)\n});\nconst container = connect(\n    mapStateToProps\n)(ColumnDropdown);\n\nexport default container;","import React from 'react';\n\nexport const ColumnDropdown = ({ value, columns, onChange }) => {\n    return (\n        <select defaultValue={value} onChange={(e) => onChange(parseInt(e.target.value))}>\n            <option value=\"\">Please select</option>\n            {columns.map((columnName, index) => (\n                <option value={index} key={index}>{columnName}  (COL{index+1})</option>\n            ))}\n        </select>\n    );\n};\n","import React from 'react';\nimport \"./displayPanel.scss\";\n\nconst DisplayPanel = ({ format, content }) => {\n    let output = '';\n    if (format === \"html\") {\n        output = <div className=\"displayPanel\" dangerouslySetInnerHTML={{ __html: content }} />;\n    } else {\n        output = <div className=\"displayPanel textFormat\">{content}</div>;\n    }\n\n    return output;\n};\n\nexport default DisplayPanel;\n","import { connect } from 'react-redux';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport DisplayPanel from './DisplayPanel';\n\nconst mapStateToProps = (state) => ({\n    format: selectors.getFormat(state),\n    content: selectors.getPreviewContent(state)\n});\n\nconst container = connect(\n    mapStateToProps\n)(DisplayPanel);\n\nexport default container;","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport { BuilderTable } from './BuilderTable';\n\nconst mapStateToProps = (state) => ({\n    rows: selectors.getRowData(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onAddRow: () => dispatch(actions.addRow()),\n    onDeleteRow: (rowId) => dispatch(actions.deleteRow(rowId)),\n    onSelectColumn: (rowId, colIndex) => dispatch(actions.selectColumn(rowId, colIndex)),\n    onToggleRowIndentation: (rowId) => dispatch(actions.toggleRowIndentation(rowId)),\n    onUpdateRowFormat: (rowId, rowFormat) => dispatch(actions.updateRowFormat(rowId, rowFormat))\n});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BuilderTable);\n\nexport default container;\n","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ColumnDropdown from '../ColumnDropdown/ColumnDropdown.container';\nimport DisplayPanel from '../DisplayPanel/DisplayPanel.container';\nimport \"./BuilderTable.scss\";\n\nexport const BuilderTable = ({ rows, onAddRow, onDeleteRow, onSelectColumn, onToggleRowIndentation, onUpdateRowFormat }) => {\n    let rowElements = <p>Click the Add Row link below to start building your checklist.</p>;\n\n    if (rows.length) {\n        rowElements = rows.map(({ rowId, colIndex, format, indent }, rowIndex) => (\n            <div className=\"builderRow\" key={rowIndex}>\n                <div className=\"colDropdown\">\n                    <ColumnDropdown\n                        value={colIndex}\n                        onChange={(columnIndex) => onSelectColumn(rowId, columnIndex)}\n                    />\n                </div>\n                <div className=\"indentCol\">\n                    <input type=\"checkbox\" checked={indent} onChange={() => onToggleRowIndentation(rowId)} id={`${rowId}-indent`} />\n                    <label htmlFor={`${rowId}-indent`}>Indent</label>\n                </div>\n                <div className=\"formatCol\">\n                    <input type=\"text\" value={format} onChange={(e) => onUpdateRowFormat(rowId, e.target.value)}/>\n                </div>\n                <div className=\"deleteRow\" onClick={() => onDeleteRow(rowId)}>\n                    <DeleteIcon style={{ fontSize: 20 }} />\n                </div>\n            </div>\n        ));\n    }\n\n    return (\n        <>\n            <div className=\"builderTable\">\n                {rowElements}\n            </div>\n            <span className=\"link\" onClick={(e) => { e.preventDefault(); onAddRow(); }}>Add Row &raquo;</span>\n\n            <DisplayPanel />\n        </>\n    );\n};","import React from 'react';\n\nconst Settings = ({ format, onChangeFormat, htmlIndentWidth, onChangeHtmlIndentWidth, rowClassPrefix,\n    onChangeRowClassPrefix, textIndentNumSpaces, onChangeTextIndentNumSpaces }) => {\n\n    const getRows = () => {\n        if (format === \"html\") {\n            return (\n                <>\n                    <div>\n                        <div className=\"settingsCol1\">\n                            Indent width\n                        </div>\n                        <div>\n                            <input type=\"number\" value={htmlIndentWidth} style={{ width: 40 }}\n                               onChange={(e) => onChangeHtmlIndentWidth(e.target.value, 10)} />px\n                        </div>\n                    </div>\n                    <div>\n                        <div className=\"settingsCol1\">\n                            HTML class prefix\n                        </div>\n                        <div>\n                            <input type=\"text\" value={rowClassPrefix}\n                                   onChange={(e) => onChangeRowClassPrefix(e.target.value)} />\n                        </div>\n                    </div>\n                </>\n            );\n        }\n\n        return (\n            <div>\n                <div className=\"settingsCol1\">\n                    Num character indent\n                </div>\n                <div>\n                    <input type=\"number\" value={textIndentNumSpaces} style={{ width: 40 }}\n                           onChange={(e) => onChangeTextIndentNumSpaces(e.target.value, 10)} />\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"builderSettings\">\n            <div>\n                <div className=\"settingsCol1\">\n                    Format\n                </div>\n                <div>\n                    <input type=\"radio\" id=\"htmlFormat\" checked={format === \"html\"}\n                           onChange={() => onChangeFormat('html')}/>\n                    <label htmlFor=\"htmlFormat\">HTML</label>\n                    <input type=\"radio\" id=\"textFormat\" checked={format === \"text\"}\n                           onChange={() => onChangeFormat('text')}/>\n                    <label htmlFor=\"textFormat\">Text</label>\n                </div>\n            </div>\n            {getRows()}\n        </div>\n    );\n};\n\nexport default Settings;","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport Settings from './Settings';\n\nconst mapStateToProps = (state) => ({\n    format: selectors.getFormat(state),\n    textIndentNumSpaces: selectors.getTextIndentNumSpaces(state),\n    htmlIndentWidth: selectors.getHtmlIndentWidth(state),\n    rowClassPrefix: selectors.getRowClassPrefix(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onChangeFormat: (format) => dispatch(actions.updateFormat(format)),\n    onChangeHtmlIndentWidth: (width) => dispatch(actions.updateHtmlIndentWidth(width)),\n    onChangeRowClassPrefix: (prefix) => dispatch(actions.updateRowClassPrefix(prefix)),\n    onChangeTextIndentNumSpaces: (numSpaces) => dispatch(actions.updateTextIndentNumSpaces(numSpaces))\n});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Settings);\n\nexport default container;\n","import React from 'react';\n\nconst Help = () => (\n    <>\n        <div>\n            This page lets you build your checklist by choosing specific columns out of your CSV file to be\n            displayed. You have the choice of indenting each column (using the indentation style you specify\n            on the Settings tab) and customizing the content of the rows however you want.\n        </div>\n\n        <h2>Placeholders</h2>\n        <p>\n            This application uses <a href=\"https://squirrelly.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">SquirrellyJS</a> as the\n            template engine. That's what allows you to enter <i>placeholders</i> in the row fields, which get\n            converted to the values from your spreadsheet. Here's a few tips:\n        </p>\n\n        <ul>\n            <li><b>{'{{it.VALUE}}'}</b> outputs the value of whatever column you've selected in the dropdown for that row.</li>\n            <li><b>{'{{it.COL1}}, {{it.COL2}}, {{it.COL3}}, ...'}</b> outputs the value of values from <i>any</i> column from\n                your spreadsheet. For convenience, the dropdown lists the column numbers in parentheses, so they're easy to find.\n            </li>\n            <li>If you want to use simple boolean logic, like only output a value from another field if it has a value,\n                you can write: <b>{'{{@if(it.COL5 !== \"none\")}}{{it.COL5}}{{/if}}'}</b>. Bit of a mouthful, but that's how the template\n                language works. Welcome to programming!\n            </li>\n        </ul>\n\n        <h2>Settings</h2>\n        <ul>\n            <li><i>Format</i>: this setting controls whether the generated output is HTML or text. HTML provides more\n            option for styling, but the text option is handier if you plan on copying & pasting it into a document\n            somewhere.</li>\n            <li>If you're constructing an HTML checklist (see the <i>Settings</i> tab option), you can enter HTML into\n                the rows to change their appearance, e.g. <b>{'<h2>{{it.VALUE}}</h2>'}</b> or {'<b>Heading here:</b> {{it.VALUE}}'}.\n                But be aware that when you embed the content onto your own sites, whatever CSS is used there will be used\n                to style the rows, so it won't look identical to what you see here. E.g. fonts, colours and sizes may\n                differ.\n            </li>\n            <li>\n                The <b>HTML class prefix</b> setting appears for the <i>HTML</i> format only. That applies a class to every\n                row which you can use for your own styling. Values from a particular column will be given a class\n                for that column, e.g. with a prefix value of <b>cg-col-</b>, you'll see <b>cg-col-5</b> in the generated\n                content for all values from the 5th column. This value is also used for indentation. Depending on which\n                columns you select in the builder table to be indented, they will get a <b>cg-col-indent-N</b> class\n                applied. That is what allows the indentation styles to be applied.\n            </li>\n        </ul>\n    </>\n);\n\nexport default Help;","import React from \"react\";\n\nconst TabPanel = ({ children, value, index }) => {\n    if (value !== index) {\n        return null;\n    }\n\n    return (\n        <div style={{ padding: \"20px 0 0\" }}>\n            {children}\n        </div>\n    );\n}\n\nexport default TabPanel;","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step3 } from './Step3';\n\nconst mapStateToProps = (state) => ({\n    hasUploadedData: selectors.hasUploadedData(state),\n    builderTab: selectors.getBuilderTab(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onUploadFile: (file) => dispatch(actions.uploadFile(file)),\n    setBuilderTab: (tab) => dispatch(actions.setBuilderTab(tab))\n});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Step3);\n\nexport default container;","import React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport BuilderTable from '../components/BuilderTable/BuilderTable.container';\nimport Settings from \"../components/BuilderTable/Settings.container\";\nimport Help from \"../components/BuilderTable/Help\";\nimport TabPanel from \"../components/TabPanel\";\n\n\nexport const Step3 = ({ onPrev, onNext, builderTab, setBuilderTab }) => (\n    <>\n        <Tabs\n            value={builderTab}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(e, newValue) => setBuilderTab(newValue)}\n        >\n            <Tab label=\"Build\" />\n            <Tab label=\"Settings\" />\n            <Tab label=\"Help\" />\n        </Tabs>\n        <TabPanel value={builderTab} index={0}>\n            <BuilderTable />\n\n            <footer>\n                <Button variant=\"outlined\" size=\"small\" color=\"secondary\" onClick={onPrev} style={{ marginRight: 10, minWidth: 20 }}>&laquo;</Button>\n                <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={onNext}>Continue &raquo;</Button>\n            </footer>\n        </TabPanel>\n        <TabPanel value={builderTab} index={1}>\n            <Settings />\n        </TabPanel>\n        <TabPanel value={builderTab} index={2}>\n            <Help />\n        </TabPanel>\n    </>\n);\n","import { connect } from 'react-redux';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step4 } from './Step4';\n\nconst mapStateToProps = (state) => ({\n    format: selectors.getFormat(state),\n    generatedContent: selectors.getGeneratedContent(state),\n    generatedCss: selectors.getGeneratedCss(state)\n});\n\nconst mapDispatchToProps = () => ({});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Step4);\n\nexport default container;","import React from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Button from \"@material-ui/core/Button\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport FileCopy from \"@material-ui/icons/FileCopy\";\nimport TabPanel from \"../components/TabPanel\";\nimport \"./Page4.scss\";\n\nexport const Step4 = ({ onPrev, onReturn, format, generatedContent, generatedCss }) => {\n    const [tab, setTab] = React.useState(0);\n\n    const getContent = () => {\n        if (format === \"html\") {\n            const fullPageContent = `<html>\n<head>\n<style type=\"text/css\">\n${generatedCss}\n</style>\n</head>\n<body>\n${generatedContent}\n</body>\n</html>`;\n\n            return (\n                <>\n                    <p>\n                        The tabs below contain your HTML and CSS for embedding your checklist into your own websites.\n                    </p>\n\n                    <Tabs\n                        value={tab}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        onChange={(e, newValue) => setTab(newValue)}\n                    >\n                        <Tab label=\"HTML\" />\n                        <Tab label=\"CSS\" />\n                        <Tab label=\"Single HTML page\" />\n                    </Tabs>\n                    <TabPanel value={tab} index={0}>\n                        <div className=\"generatePanel\">{generatedContent}</div>\n                        <div style={{ float: 'right' }}>\n                            <CopyToClipboard text={generatedContent}>\n                                <Button variant=\"contained\" disableElevation size=\"small\" color=\"primary\" startIcon={<FileCopy />}>Copy to clipboard</Button>\n                            </CopyToClipboard>\n                        </div>\n                    </TabPanel>\n                    <TabPanel value={tab} index={1}>\n                        <div className=\"generatePanel\">{generatedCss}</div>\n                        <div style={{ float: 'right' }}>\n                            <CopyToClipboard text={generatedCss}>\n                                <Button variant=\"contained\" disableElevation size=\"small\" color=\"primary\" startIcon={<FileCopy />}>Copy to clipboard</Button>\n                            </CopyToClipboard>\n                        </div>\n                    </TabPanel>\n                    <TabPanel value={tab} index={2}>\n                        <div className=\"generatePanel\">{fullPageContent}</div>\n                        <div style={{ float: 'right' }}>\n                            <CopyToClipboard text={fullPageContent}>\n                                <Button variant=\"contained\" disableElevation size=\"small\" color=\"primary\" startIcon={<FileCopy />}>Copy to clipboard</Button>\n                            </CopyToClipboard>\n                        </div>\n                    </TabPanel>\n\n                </>\n            )\n        }\n\n        return (\n            <>\n                <p>\n                    The block below contains your generated content.\n                </p>\n\n                <div className=\"generatePanel\">{generatedContent}</div>\n                <div style={{ float: 'right' }}>\n                    <CopyToClipboard text={generatedContent}>\n                        <Button variant=\"contained\" disableElevation size=\"small\" color=\"primary\" startIcon={<FileCopy />}>Copy to clipboard</Button>\n                    </CopyToClipboard>\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h1>Done!</h1>\n\n            {getContent()}\n\n            <br />\n            <footer>\n                <Button variant=\"outlined\" size=\"small\" color=\"secondary\" onClick={onPrev}\n                        style={{ marginRight: 10, minWidth: 20 }}>&laquo;</Button>\n                <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={onReturn}>Start again</Button>\n            </footer>\n        </>\n    );\n};","export default {\n    GITHUB_URL: 'https://github.com/benkeen/checklist-generator'\n};\n","import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { Stepper } from '../components/Stepper';\nimport { Step1 } from './Step1';\nimport Step2 from './Step2.container';\nimport Step3 from './Step3.container';\nimport Step4 from './Step4.container';\nimport C from '../constants';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Open Sans',\n            'sans-serif'\n        ].join(','),\n    }\n});\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nconst steps = [\n    'Intro',\n    'Upload file',\n    'Build checklist',\n    'Generate'\n];\n\n\nconst Page = ({ pageIndex, setPageIndex }) => {\n    const classes = useStyles();\n\n    const getContent = () => {\n        if (pageIndex === 0) {\n            return (\n                <Step1\n                    onNext={() => setPageIndex(pageIndex+1)}\n                />\n            );\n        } else if (pageIndex === 1) {\n            return (\n                <Step2\n                    onPrev={() => setPageIndex(pageIndex - 1)}\n                    onNext={() => setPageIndex(pageIndex + 1)}\n                />\n            );\n        } else if (pageIndex === 2) {\n            return (\n                <Step3\n                    onPrev={() => setPageIndex(pageIndex - 1)}\n                    onNext={() => setPageIndex(pageIndex + 1)}\n                />\n            );\n        } else if (pageIndex === 3) {\n            return (\n                <Step4\n                    onPrev={() => setPageIndex(pageIndex - 1)}\n                    onReturn={() => setPageIndex(pageIndex - 3)}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <>\n                <AppBar position=\"fixed\" className=\"appBar\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Checklist Generator\n                        </Typography>\n                        <div>\n                            <IconButton aria-label=\"github\" className={classes.margin} onClick={() => window.open(C.GITHUB_URL, '_blank')}>\n                                <GitHubIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <div className=\"app\">\n                    <Stepper steps={steps} activeStep={pageIndex} />\n\n                    {getContent()}\n                </div>\n            </>\n        </ThemeProvider>\n    );\n}\n\nexport default Page;\n","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport Page from './Page';\n\nconst mapStateToProps = (state) => ({\n    pageIndex: selectors.getPageIndex(state)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    setPageIndex: (pageIndex) => dispatch(actions.setPageIndex(pageIndex))\n});\n\nconst container = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Page);\n\nexport default container;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store, { persistor } from './store';\nimport Page from './pages/Page.container';\nimport \"./css/global.scss\";\n\nconst App = () => (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <Page />\n        </PersistGate>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}