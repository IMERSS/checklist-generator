{"version":3,"sources":["helpers/utils.js","helpers/builder.js","store/settings/settings.selectors.js","store/settings/settings.actions.js","helpers/csv.js","constants.js","store/settings/settings.reducer.js","store/index.js","components/Stepper.js","components/TabPanel.js","pages/Step1.js","pages/Step2.container.js","pages/Step2.js","components/ColumnDropdown/ColumnDropdown.container.js","components/ColumnDropdown/ColumnDropdown.js","components/DisplayPanel/DisplayPanel.js","components/DisplayPanel/DisplayPanel.container.js","components/RowSettingsDialog/RowSettingsDialog.js","components/RowSettingsDialog/RowSettingsDialog.container.js","components/BuilderTable/BuilderTable.container.js","components/BuilderTable/BuilderTable.js","components/BuilderTable/Settings.js","components/BuilderTable/Settings.container.js","components/BuilderTable/Help.js","components/ApplySettingsDialog/ApplySettingsDialog.js","components/ApplySettingsDialog/ApplySettingsDialog.container.js","pages/Step3.container.js","pages/Step3.js","components/CopyToClipboard/CopyToClipboardBtn.js","components/DownloadContentBtn/DownloadContentBtn.js","components/SettingsDialog/SettingsDialog.js","components/SettingsDialog/SettingsDialog.container.js","pages/Step4.container.js","pages/Step4.js","pages/Page.js","pages/Page.container.js","App.js","serviceWorker.js","index.js"],"names":["removeArrayItem","arr","value","index","indexOf","splice","showNotification","title","message","type","arguments","length","undefined","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","showIcon","documentRowPlaceholders","computeDocumentRowPlaceholders","rows","result","forEach","row","placeholders","i","push","getDocumentRowPlaceholders","getFormattedCell","format","hasError","generationFormat","errorStr","squirrelly","e","getBuilderContent","isPreview","data","rowData","textIndentNumSpaces","htmlIndentWidth","rowClassPrefix","rtfDefaultFontSize","rtfDefaultLineHeight","lines","getBuilderLines","rowConfig","lastSeenColValues","numConfigRows","rowPlaceholders","currIndent","lastValueWasAlreadySeen","config","uiRowIndex","colIndex","errors","indent","colValue","k","obsoleteCacheRow","hasErrors","VALUE","content","textSpaces","parseInt","htmlIndent","_ref","repeat","_ref2","lineHeight","settings","rtfLineHeight","updatedStr","applyArbitraryRegex","str","regex","newStr","RegExp","replace","replacement","arbitraryRegex","Parser","parse","rtfStr","openFontTags","token","name","attributes","size","trim","text","convertKnownHtmlCharsToRtf","getData","state","getUploadedFilename","uploadedFilename","getPageIndex","pageIndex","getRows","getSortedRows","sortedRows","getBuilderTab","builderTab","getFormat","getTextIndentNumSpaces","getHtmlIndentWidth","getRowClassPrefix","getRtfDefaultFontSize","getRtfDefaultLineHeight","getSettingsError","loadSettingsError","getEditingRowId","editingRowId","isApplySettingsDialogOpen","applySettingsDialogOpen","isRowSettingsDialogOpen","rowSettingsDialogOpen","shouldAutoUpdate","autoUpdate","getFormatLabel","createSelector","html","rtf","getRowData","map","rowId","hasUploadedData","getColumns","lastRegenerationCount","lastBuilderContent","getPreviewContent","documentRowPlaceholdersGenerated","regenerationCount","getGeneratedContent","getGeneratedCss","indentWidth","classPrefix","filter","join","getSettingsStr","JSON","stringify","getRowSettings","getSelectedRowColumn","columns","getRowArbitraryRegex","uploadFile","file","dispatch","Promise","resolve","Papa","complete","parseCsv","then","resp","payload","path","addRow","rowSettings","updateRowFormatError","debounce","rowString","invalidTags","validTags","validateRtfRow","closeApplySettingsDialog","updateSetting","setting","initialState","appStateVersion","C","settingsReducer","action","newRowSettings","example","newRowId","nanoid","newSortedRows","newRows","tab","error","enabled","persistConfig","key","storage","blacklist","settingsPersistConfig","rootReducer","combineReducers","persistReducer","persistedReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","Thunk","persistor","persistStore","Stepper","steps","activeStep","React","createElement","className","MUIStepper","label","stepProps","labelProps","completed","Step","Object","assign","StepLabel","TabPanel","children","style","padding","Step1","onNext","setTab","useState","Tabs","indicatorColor","textColor","onChange","newValue","Tab","src","width","height","alt","Button","variant","color","onClick","connect","selectors","onUploadFile","actions","onReset","onPrev","onDrop","useCallback","files","getRootProps","getInputProps","isDragActive","useDropzone","Fragment","href","target","getButtons","continueButton","marginRight","minWidth","defaultValue","columnName","DisplayPanel","panel","setAutoUpdate","manualUpdateDisplay","isRtf","classes","dangerouslySetInnerHTML","__html","rtfWarning","checked","id","htmlFor","disableElevation","disabled","RowSettingsDialog","selectedColumn","onClose","open","updateRowSettings","updateArbitraryRegex","rtfLineHeightUseDefault","updateSettings","updateArbRegex","field","newData","split","Dialog","disableBackdropClick","onEscapeKeyDown","aria-labelledby","maxWidth","DialogTitle","DialogContent","dividers","DialogActions","onAddRow","onDeleteRow","onSelectColumn","selectColumn","onToggleRowIndentation","onUpdateRowFormat","rowFormat","updateRowFormat","getState","openRowSettingsDialog","rowElements","getSettingsCol","SettingsIcon","fontSize","rowIndex","rowFieldClass","ColumnDropdown","columnIndex","console","log","DeleteIcon","preventDefault","Settings","onChangeSetting","settingName","Help","rel","ApplySettingsDialogWrapper","dialogOpen","openDialog","closeDialog","processSettings","setSettings","autoFocus","settingsStr","Array","isArray","hasOwnProperty","ApplySettingsDialog","formatLabel","setBuilderTab","BuilderTable","CopyToClipboardBtn","CopyToClipboard","onCopy","startIcon","FileCopy","DownloadContentBtn","GetApp","downloadFile","filename","Blob","a","document","url","URL","createObjectURL","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","SettingsDialog","generatedContent","generatedCss","mapDispatchToProps","onReturn","settingsDialogOpen","setSettingsDialogVisibility","getContent","fullPageContent","float","button","theme","createTheme","typography","fontFamily","useStyles","makeStyles","root","flexGrow","menuButton","spacing","display","Page","setPageIndex","setDocumentRowPlaceholdersGenerated","useEffect","ThemeProvider","AppBar","position","Toolbar","Typography","PlaylistAddCheckIcon","IconButton","aria-label","margin","GitHubIcon","Step2","Step3","Step4","App","Provider","PersistGate","loading","onBeforeLift","async","checkState","ReactNotification","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"4cAEO,MAAMA,EAAkBA,CAACC,EAAKC,KACnC,IAAIC,EAAQF,EAAIG,QAAQF,GAIxB,OAHIC,GAAS,GACXF,EAAII,OAAOF,EAAO,GAEbF,GAGIK,EAAmB,SAACC,EAAOC,GAA+B,IAAtBC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,UACtDG,QAAMC,gBAAgB,CACpBP,QACAC,UACAC,OACAM,OAAQ,MACRC,UAAW,aACXC,YAAa,CAAC,oBAAqB,mBACnCC,aAAc,CAAC,oBAAqB,oBACpCC,QAAS,CACPC,SAAU,IACVC,UAAU,M,kDC0ChB,IAAIC,EAA0B,GACvB,MAAMC,EAAkCC,IAC7C,MAAMC,EAAS,GACfD,EAAKE,QAASC,IACZ,MAAMC,EAAe,GACrBD,EAAID,QAAQ,CAACG,EAAG1B,KACdyB,EAAa,OAASzB,EAAQ,IAAM0B,IAEtCJ,EAAOK,KAAKF,KAEdN,EAA0BG,GAGfM,EAA6BA,IAAMT,EAEnCU,EAAmBA,CAC9BC,EACAC,EACAN,EACAO,KAEA,IAAIC,EAAW,8BACXlC,EACmB,SAArBiC,GAAoD,QAArBA,EAC3B,4BAA4BC,WAC5B,OAAOA,QAEb,GAAIF,EACF,OAAOhC,EAGT,IACEA,EAAQmC,SAAkBJ,EAAQL,GAClC,MAAOU,IAGT,OAAOpC,GAwEIqC,EAAoBA,CAC/BC,EACAC,EACAC,EACAT,EACAU,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAlLuBC,EAACR,EAAMS,EAAWf,KAC/C,MAAMgB,EAAoB,GACpBH,EAAQ,GACRI,EAAgBF,EAAUvC,OAC1B0C,EAAkBtB,IAExB,IAAK,IAAIJ,EAAM,EAAGA,EAAMc,EAAK9B,OAAQgB,IAAO,CAE1C,GAAyB,IAArBc,EAAKd,GAAKhB,QAAiC,KAAjB8B,EAAKd,GAAK,GACtC,SAGF,IAAI2B,EAAa,EACbC,GAA0B,EAE9BL,EAAUxB,QAAQ,CAAC8B,EAAQC,KACzB,MAAM,SAAEC,EAAQ,OAAEzB,EAAM,OAAE0B,EAAM,OAAEC,GAAWJ,EACvCK,EAAWpB,EAAKd,GAAK+B,GAK3B,GAHAJ,EAAaM,EAASN,EAAa,EAAIA,EAGnCH,EAAkBO,KAAcG,EAElC,YADAN,GAA0B,GAK5B,GAAIA,GAA0C,IAAfE,EAC7B,IAAK,IAAIK,EAAIL,EAAa,EAAGK,EAAIV,EAAeU,IAAK,CACnD,MAAMC,EAAmBb,EAAUY,GAAGJ,SACtCP,EAAkBY,GAAoB,KAI1CR,GAA0B,EAE1B,MAAM3B,EAAeyB,EAAgB1B,GAC/BqC,EAAYL,GAAUA,EAAOhD,OAAS,EAE5CqC,EAAMlB,KAAK,CACT4B,WACAD,aACAvD,MAAO8B,EACLC,EACA+B,EACA,CAAEC,MAAOJ,KAAajC,GACtBO,GAEFyB,OAAQN,IAGVH,EAAkBO,GAAYG,IAIlC,OAAOb,GA0HOC,CAAgBR,EAAMC,EAAST,GAC7C,IAAIiC,EAAU,GAEd,MAAMC,EAAaC,SAASzB,GAAuB,EAAG,IAChD0B,EAAaD,SAASxB,GAAmB,EAAG,IA8ClD,OA1CIJ,EACFQ,EAAMtB,QAAQ4C,IAAwB,IAAvB,MAAEpE,EAAK,OAAE0D,GAAQU,EAC9B,GAAe,SAAXrC,GAAgC,QAAXA,EAAkB,CAEzCiC,GAAW,8BADMN,EAAS,GAAKS,QACuBnE,eAEtDgE,GAAW,IAAIK,QAAQX,EAAS,GAAKO,GAAcjE,EAAQ,QAI/D8C,EAAMtB,QAAQ8C,IAA8C,IAA7C,MAAEtE,EAAK,SAAEwD,EAAQ,WAAED,EAAU,OAAEG,GAAQY,EACpD,GAAe,SAAXvC,EAAmB,CAErBiC,GAAW,eADC,GAAGrB,IAAiBa,EAAW,KAAKb,WAAwBe,QACtC1D,iBAC7B,GAAe,QAAX+B,EAAkB,CAC3B,MAAMwC,EACJ/B,EAAQe,GAAYiB,UACpBhC,EAAQe,GAAYiB,SAASC,cACzBjC,EAAQe,GAAYiB,SAASC,cAC7B5B,EAEA6B,EAzDqBC,EAACC,EAAKC,KACvC,IAAIC,EAASF,EASb,OAPAC,EAAMrD,QAASC,IACb,GAAIA,EAAIoD,MAAO,CACb,MAAMA,EAAQ,IAAIE,OAAOtD,EAAIoD,OAC7BC,EAASA,EAAOE,QAAQH,EAAOpD,EAAIwD,gBAIhCH,GA+CkBH,CACjB3E,EACAwC,EAAQe,GAAY2B,gBAGtBlB,GACE,cAAcO,MACb,IAAIF,QAAQX,EAAS,GAAKO,GApHMD,KACzC,MAAMzB,EAAO4C,IAAOC,MAAMpB,GAE1B,IAAIqB,EAAS,GACTC,GAAe,EACnB,IAAK,MAAMC,KAAShD,EACC,SAAfgD,EAAMhF,OACW,MAAfgF,EAAMC,OACRH,GAAU,SAEO,MAAfE,EAAMC,OACRH,GAAU,SAEO,MAAfE,EAAMC,OACRH,GAAU,UAEO,OAAfE,EAAMC,OACRH,GAAU,UAGO,SAAfE,EAAMC,MACJD,EAAME,YAAcF,EAAME,WAAWC,OACvCL,GAAU,QAAqD,EAA7CnB,SAASqB,EAAME,WAAWC,KAAKC,OAAQ,IACzDL,KAGe,YAAfC,EAAMC,OACRH,GAAU,oBAIK,UAAfE,EAAMhF,OACW,MAAfgF,EAAMC,MAA+B,MAAfD,EAAMC,MAA+B,MAAfD,EAAMC,OACpDH,GAAU,KAEO,SAAfE,EAAMC,MAAmBF,EAAe,IAC1CD,GAAU,IACVC,KAEiB,YAAfC,EAAMC,OACRH,GAAU,MAIK,SAAfE,EAAMhF,OACR8E,GAAUE,EAAMK,MAIpB,OAAOP,GAoEGQ,CAA2BnB,IAC7B,iBAEFV,GAAW,IAAIK,QAAQX,EAAS,GAAKO,GAAcjE,EAAQ,OAIhD,QAAX+B,IAEFiC,EAAU,2BAAgD,EAArBpB,MAA2BoB,WAI7DA,G,YCrOF,MACM8B,EAAWC,GAAUA,EAAMvB,SAASjC,KACpCyD,EAAuBD,GAAUA,EAAMvB,SAASyB,iBAChDC,EAAgBH,GAAUA,EAAMvB,SAAS2B,UACzCC,EAAWL,GAAUA,EAAMvB,SAASlD,KACpC+E,EAAiBN,GAAUA,EAAMvB,SAAS8B,WAC1CC,EAAiBR,GAAUA,EAAMvB,SAASgC,WAC1CC,EAAaV,GAAUA,EAAMvB,SAASzC,OACtC2E,EAA0BX,GACrCA,EAAMvB,SAAS/B,oBACJkE,EAAsBZ,GAAUA,EAAMvB,SAAS9B,gBAC/CkE,EAAqBb,GAAUA,EAAMvB,SAAS7B,eAC9CkE,EAAyBd,GACpCA,EAAMvB,SAAS5B,mBACJkE,EAA2Bf,GACtCA,EAAMvB,SAAS3B,qBACJkE,EAAoBhB,GAAUA,EAAMvB,SAASwC,kBAC7CC,EAAmBlB,GAAUA,EAAMvB,SAAS0C,aAC5CC,EAA6BpB,GACxCA,EAAMvB,SAAS4C,wBACJC,EAA2BtB,GACtCA,EAAMvB,SAAS8C,sBACJC,EAAoBxB,GAAUA,EAAMvB,SAASgD,WAK7CC,EAAiBC,YAAejB,EAAY1E,IAC3C,CACV4F,KAAM,OACNC,IAAK,MACLhC,KAAM,QAEG7D,KAEA8F,EAAaH,YACxBrB,EACAD,EACA,CAACE,EAAYhF,IACJgF,EAAWwB,IAAKC,IACd,IACFzG,EAAKyG,GACRA,YAMKC,EAAkBN,YAAe5B,EAAUvD,GAAkB,OAATA,GAEpD0F,EAAaP,YAAe5B,EAAUvD,GAC5CA,EAAK9B,OAGH8B,EAAK,GAFH,IAKX,IAAI2F,EACAC,EACG,MAAMC,GAAoBV,YAC/BH,EApCiDxB,GACjDA,EAAMvB,SAAS6D,iCAFoBtC,GAAUA,EAAMvB,SAAS8D,kBAwC5DxC,EACA+B,EACApB,EACAC,EACAC,EACA,CACEa,EACAa,EACAC,EACA/F,EACAC,EACAT,EACAU,EACAC,IAEK2F,IAKFb,GACDc,IAAsBJ,GACtBC,IAIFD,EAAwBI,EACxBH,EAAqB9F,GACnB,EACAE,EACAC,EACAT,EACAU,EACAC,IATOyF,GARA,IAwBAI,GAAsBb,YACjC5B,EACA+B,EACApB,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,CACEvE,EACAC,EACAT,EACAU,EACAC,EACAC,EACAC,EACAC,IAEAR,GACE,EACAE,EACAC,EACAT,EACAU,EACAC,EACAC,EACAC,EACAC,IAIO2F,GAAkBd,YAC7BG,EACAlB,EACAC,EACA,CAACpE,EAASiG,EAAaC,KACrB,MAAM5F,EAAQ,GASd,OARqBN,EAAQmG,OAAOvE,IAAA,IAAC,OAAEV,GAAQU,EAAA,OAAKV,IAEvClC,QAAQ,CAACC,EAAKxB,KACzB6C,EAAMlB,KACJ,IAAI8G,WAAqBzI,EAAQ,oBAAoBwI,EAAcxI,YAIhE6C,EAAM8F,KAAK,QAOTC,GAAiBnB,YAC5BrB,EACAD,EACAK,EACAC,EACAC,EACAC,EACA,CACEN,EACAhF,EACAS,EACAU,EACAC,EACAC,KAEA,MAAM6B,EAAW,CACflD,KAAM,GACNS,SACAU,sBACAC,kBACAC,kBAMF,OAJA2D,EAAW9E,QAASuG,IAClBvD,EAASlD,KAAKM,KAAKN,EAAKyG,MAGnBe,KAAKC,UAAUvE,EAAU,KAAM,QAI7BwE,GAAiBtB,YAC5BT,EACAb,EACA,CAACc,EAAc5F,IACR4F,EAGE5F,EAAK4F,GAAc1C,SAFjB,IAMAyE,GAAuBvB,YAClCT,EACAb,EACA6B,EACA,CAACf,EAAc5F,EAAM4H,IACdhC,EAGEgC,EAAQ5H,EAAK4F,GAAc1D,UAFzB,IAMA2F,GAAuBzB,YAClCT,EACAb,EACA,CAACc,EAAc5F,IACR4F,EAGE5F,EAAK4F,GAAchC,eAFjB,IC/MAkE,GAAcC,GAAUC,ICRZD,IAChB,IAAIE,QAASC,IAClBC,IAAKrE,MAAMiE,EAAM,CACfK,SAAWnH,GAASiH,EAAQjH,ODMhCoH,CAASN,GAAMO,KAAMC,IAGnBxI,EAA+BwI,EAAKtH,MAEpC+G,EAAS,CACP/I,KARkB,WASlBuJ,QAAS,CACP7D,iBAAkBoD,EAAKU,KACvBxH,KAAMsH,EAAKtH,WAmBNyH,GAAUC,IAAW,CAChC1J,KAFqB,UAGrBuJ,QAAS,IAAKG,KAuBHC,GAAuBC,mBAClC,IACA,CAACb,EAAUvB,EAAOhG,EAAQE,KAExB,GAAyB,QAArBA,EACF,OAKFqH,EAAS,CACP/I,KAZiC,0BAajCuJ,QAAS,CACP/B,QACAtE,OF6JuB2G,KAC7B,MAAM7H,EAAO4C,IAAOC,MAAMgF,GAEpBC,EAAc,GACdC,EAAY,CAAC,IAAK,IAAK,IAAK,KAAM,OAAQ,WAEhD,IAAK,MAAM/E,KAAShD,EACC,SAAfgD,EAAMhF,OAC+B,IAAnC+J,EAAUpK,QAAQqF,EAAMC,OAC1B6E,EAAYzI,KAAK2D,EAAMC,MAK7B,OAAO6E,GEjLUE,CAAexI,QAyHrByI,GAA2BA,KAAA,CACtCjK,KAFyC,gCAuB9BkK,GAAgBA,CAACC,EAAS1K,KAAK,CAC1CO,KAF4B,iBAG5BuJ,QAAS,CACPY,UACA1K,WE3NW,OACC,gDADD,GAEK,ECGpB,MAAM2K,GAAe,CAGnBC,gBAAiBC,GACjB1E,UAAW,EACXF,iBAAkB,GAClB1D,KAAM,KACNjB,KAAM,GACNgF,WAAY,GACZE,WAAY,EACZgB,YAAY,EACZzF,OAAQ,OACRU,oBAAqB,EACrBC,gBAAiB,GACjBC,eAAgB,UAChBC,mBAAoB,GACpBC,qBAAsB,GACtBmE,kBAAmB,KACnBI,yBAAyB,EACzBE,uBAAuB,EACvBJ,aAAc,KACdmB,kCAAkC,EAGlCC,kBAAmB,GAuONwC,OApOS,WAAmC,IAAlC/E,EAAKvF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGmK,GAAcI,EAAMvK,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQqK,EAAOxK,MACb,IH0EiB,QGzEf,OAAOoK,GAGT,IHmEiB,QGlEf,MAAO,IACF5E,EACHxD,KAAM,KACNiF,YAAY,EACZvB,iBAAkB,GAClB3E,KAAM,GACNgF,WAAY,GACZE,WAAY,EACZQ,kBAAmB,KACnBI,yBAAyB,EACzBE,uBAAuB,EACvBJ,aAAc,KACdoB,kBAAmBvC,EAAMuC,kBAAoB,GAGjD,IH5B0B,iBG6BxB,MAAO,IACFvC,EACHI,UAAW4E,EAAOjB,QAAQ3D,WAE9B,IHlDoB,WGmDlB,MAAO,IACFJ,EACHE,iBAAkB8E,EAAOjB,QAAQ7D,iBACjC1D,KAAMwI,EAAOjB,QAAQvH,MAEzB,IHjCyB,gBGiCG,CAC1B,MAAM,MAAEwF,EAAK,SAAEvE,GAAauH,EAAOjB,QAEnC,MAAO,IACF/D,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyG,GAAQ,IACJhC,EAAMzE,KAAKyG,GACdvE,WACAgB,SAAU,MAKlB,IH1CmB,UG0CG,CACpB,MAAMwG,EAAiB,CACrBxH,SAAU,KACVE,QAAQ,EACRD,OAAQ,GACR1B,OAAQ,eACRyC,SAAU,GACVU,eAAgB,CACd,CAAE+F,QAAS,GAAIpG,MAAO,GAAII,YAAa,IACvC,CAAEgG,QAAS,GAAIpG,MAAO,GAAII,YAAa,IACvC,CAAEgG,QAAS,GAAIpG,MAAO,GAAII,YAAa,IACvC,CAAEgG,QAAS,GAAIpG,MAAO,GAAII,YAAa,QAEtC8F,EAAOjB,SAGNoB,EAAWC,YAAO,GACxB,MAAO,IACFpF,EACHO,WAAY,IAAIP,EAAMO,WAAY4E,GAClC5J,KAAM,IACDyE,EAAMzE,KACT,CAAC4J,GAAWF,IAIlB,IH9DsB,aG8DG,CACvB,MAAMI,EAAgBtL,EACpBiG,EAAMO,WACNyE,EAAOjB,QAAQ/B,OAEXsD,EAAU,IAAKtF,EAAMzE,MAG3B,cAFO+J,EAAQN,EAAOjB,QAAQ/B,OAEvB,IACFhC,EACHO,WAAY8E,EACZ9J,KAAM+J,GAGV,IHzEsB,aG0EpB,MAAO,IACFtF,EACHO,WAAY,GACZhF,KAAM,IAGV,IH7EkC,yBG8EhC,MAAO,IACFyE,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyJ,EAAOjB,QAAQ/B,OAAQ,IACnBhC,EAAMzE,KAAKyJ,EAAOjB,QAAQ/B,OAC7BrE,QAASqC,EAAMzE,KAAKyJ,EAAOjB,QAAQ/B,OAAOrE,UAKlD,IHvD6B,oBGuDG,CAC9B,MAAM,MAAEqE,EAAK,OAAEhG,GAAWgJ,EAAOjB,QACjC,MAAO,IACF/D,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyG,GAAQ,IACJhC,EAAMzE,KAAKyG,GACdhG,YAKR,IHrD2B,kBGsDzB,MAAO,IACFgE,EACHS,WAAYuE,EAAOjB,QAAQwB,KAG/B,IHwD0B,iBGvDxB,MAAO,IACFvF,EACH,CAACgF,EAAOjB,QAAQY,SAAUK,EAAOjB,QAAQ9J,OAG7C,IHlDkC,yBGmDhC,MAAO,IACF+F,EACHiB,kBAAmB+D,EAAOjB,QAAQyB,OAGtC,IH3DgC,uBG4D9B,MAAO,IACFxF,EACHiB,kBAAmB,MAGvB,IHWsC,6BGVpC,MAAO,IACFjB,EACHqB,yBAAyB,GAG7B,IHUuC,8BGTrC,MAAO,IACFrB,EACHqB,yBAAyB,GAG7B,IHSoC,2BGRlC,MAAO,IACFrB,EACHuB,uBAAuB,EACvBJ,aAAc6D,EAAOjB,QAAQ/B,OAGjC,IHQqC,4BGPnC,MAAO,IACFhC,EACHuB,uBAAuB,GAG3B,IHO+B,sBGN7B,MAAO,IACFvB,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyE,EAAMmB,cAAe,IACjBnB,EAAMzE,KAAKyE,EAAMmB,cACpB1C,SAAUuG,EAAOjB,QAAQtF,YAKjC,IHtJmC,0BGuJjC,MAAO,IACFuB,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyJ,EAAOjB,QAAQ/B,OAAQ,IACnBhC,EAAMzE,KAAKyJ,EAAOjB,QAAQ/B,OAC7BtE,OAAQsH,EAAOjB,QAAQrG,UAK/B,IHF2B,kBGGzB,MAAO,IACFsC,EACHyB,WAAYuD,EAAOjB,QAAQ0B,SAG/B,IHFyB,gBGGvB,MAAO,IACFzF,EACHuC,kBAAmBvC,EAAMuC,kBAAoB,GAGjD,IHLkC,yBGMhC,MAAO,IACFvC,EACHzE,KAAM,IACDyE,EAAMzE,KACT,CAACyE,EAAMmB,cAAe,IACjBnB,EAAMzE,KAAKyE,EAAMmB,cACpBhC,eAAgB6F,EAAOjB,QAAQjF,SAKvC,IHhMF,0CGiMI,MAAO,IACFkB,EACHsC,iCAAkC0C,EAAOjB,QAAQ9J,OAGrD,QACE,OAAO+F,IC1Pb,MAAM0F,GAAgB,CACpBC,IAAK,OACLC,YACAC,UAAW,CAAC,aAGRC,GAAwB,CAC5BH,IAAK,WACLC,YACAC,UAAW,CAAC,qCAGRE,GAAcC,YAAgB,CAClCvH,SAAUwH,YAAeH,GAAuBf,MAG5CmB,GAAmBD,YAAeP,GAAeK,IAEjDI,GACe,qBAAXC,QACNA,OAAOC,sCACTC,IACI1L,GAAQ2L,YACZL,GACAC,GAAiBK,YAAgBC,OAG7BC,GAAYC,YAAa/L,IAEhBA,U,2IC9BR,MAAMgM,GAAUvI,IAAA,IAAC,MAAEwI,EAAK,WAAEC,GAAYzI,EAAA,OAC3C0I,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAACE,KAAU,CAACJ,WAAYA,GACrBD,EAAM9E,IAAI,CAACoF,EAAOjN,KACjB,MAAMkN,EAAY,GACZC,EAAa,GAInB,OAFAD,EAAUE,WAAY,EAGpBP,IAAAC,cAACO,KAAIC,OAAAC,OAAA,CAAC9B,IAAKwB,GAAWC,GACpBL,IAAAC,cAACU,KAAcL,EAAaF,S,cCNzBQ,OAREtJ,IAAiC,IAAhC,SAAEuJ,EAAQ,MAAE3N,EAAK,MAAEC,GAAOmE,EAC1C,OAAIpE,IAAUC,EACL,KAGF6M,IAAAC,cAAA,OAAKa,MAAO,CAAEC,QAAS,aAAeF,I,oBCDxC,MAAMG,GAAQ1J,IAAiB,IAAhB,OAAE2J,GAAQ3J,EAC9B,MAAOkH,EAAK0C,GAAUlB,IAAMmB,SAAS,GAErC,OACEnB,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBAEJD,IAAAC,cAACmB,KAAI,CACHlO,MAAOsL,EACP6C,eAAe,UACfC,UAAU,UACVC,SAAUA,CAACjM,EAAGkM,IAAaN,EAAOM,IAElCxB,IAAAC,cAACwB,KAAG,CAACrB,MAAM,UACXJ,IAAAC,cAACwB,KAAG,CAACrB,MAAM,cAEbJ,IAAAC,cAACW,GAAQ,CAAC1N,MAAOsL,EAAKrL,MAAO,GAC3B6M,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,0CACuC,IACxCD,IAAAC,cAAA,SAAG,6CAELD,IAAAC,cAAA,OACEyB,IAAK,iCACLC,MAAO,IACPC,OAAQ,IACRC,IAAI,uCAGR7B,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,OACGD,IAAAC,cAAA,SAAG,mDAAmD,OAE5DD,IAAAC,cAAA,OACEyB,IAAK,qCACLC,MAAO,IACPC,OAAQ,IACRC,IAAI,mCAKZ7B,IAAAC,cAACW,GAAQ,CAAC1N,MAAOsL,EAAKrL,MAAO,GAC3B6M,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,mJAKJD,IAAAC,cAAA,UAAI,4EAIJD,IAAAC,cAAA,UAAI,oEAGJD,IAAAC,cAAA,UAAI,wIAIJD,IAAAC,cAAA,UAAI,gHAIJD,IAAAC,cAAA,UAAI,wDACJD,IAAAC,cAAA,UAAI,mLAKJD,IAAAC,cAAA,UAAI,qFAORD,IAAAC,cAAC6B,KAAM,CAACC,QAAQ,WAAWnJ,KAAK,QAAQoJ,MAAM,UAAUC,QAAShB,GAAQ,sB,oBCnEhEjN,OAFGkO,YAVOjJ,IAAK,CAC5BE,iBAAkBgJ,EAA8BlJ,GAChDiC,gBAAiBiH,EAA0BlJ,KAGjBuD,IAAQ,CAClC4F,aAAe7F,GAASC,EAAS6F,GAAmB9F,IACpD+F,QAASA,IAAM9F,ER8FM,CAAS/I,KAAM,YQ3FpByO,CCVG5K,IAOd,IAPe,OACpBiL,EAAM,OACNtB,EAAM,iBACN9H,EAAgB,gBAChB+B,EAAe,aACfkH,EAAY,QACZE,GACDhL,EACC,MAAMkL,EAASxC,IAAMyC,YAClBC,IACCN,EAAaM,EAAM,KAErB,CAACN,KAGG,aAAEO,EAAY,cAAEC,EAAa,aAAEC,GAAiBC,aAAY,CAAEN,WAqEpE,OACExC,IAAAC,cAAA,WApCI/E,EAEA8E,IAAAC,cAAA,SAAG,8BAC0BD,IAAAC,cAAA,SAAI9G,GAAqB,qDAClB,IAClC6G,IAAAC,cAAA,QAAMC,UAAU,OAAO+B,QAASK,GAAS,uBAEjC,IAAI,uBAOhBtC,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,MAAAQ,OAAAC,OAAA,CAAKR,UAAU,kBAAqByC,KAClC3C,IAAAC,cAAA,QAAW2C,KACVC,EACC7C,IAAAC,cAAA,SAAG,0BAEHD,IAAAC,cAAA,SAAG,6DAIPD,IAAAC,cAAA,SAAG,qDACkD,IACnDD,IAAAC,cAAA,KAAG+C,KAAK,kBAAkBC,OAAO,UAAS,aAErC,IAAI,kDA5DEC,MACjB,IAAIC,EAAiB,KAcrB,OAbIjI,IACFiI,EACEnD,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,UACNC,QAAShB,GACV,kBAOHjB,IAAAC,cAAA,cACED,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,YACNC,QAASM,EACTzB,MAAO,CAAEsC,YAAa,GAAIC,SAAU,KACrC,QAGAF,IA4CFD,M,wCCnFQlP,OAFGkO,YAHOjJ,IAAK,CAC5BmD,QAAS+F,EAAqBlJ,KAEdiJ,CCLY5K,IAAmC,IAAlC,MAAEpE,EAAK,QAAEkJ,EAAO,SAAEmF,GAAUjK,EACzD,OACE0I,IAAAC,cAAA,UACEqD,aAAcpQ,EACdqO,SAAWjM,GAAMiM,EAASnK,SAAS9B,EAAE2N,OAAO/P,SAE5C8M,IAAAC,cAAA,UAAQ/M,MAAM,IAAG,iBAChBkJ,EAAQpB,IAAI,CAACuI,EAAYpQ,IACxB6M,IAAAC,cAAA,UAAQ/M,MAAOC,EAAOyL,IAAKzL,GACxBoQ,EAAW,QAAMpQ,EAAQ,EAAE,S,OCsDvBqQ,OA7DMlM,IAMd,IACDmM,GAPgB,OACpBxO,EAAM,WACNyF,EAAU,cACVgJ,EAAa,oBACbC,EAAmB,QACnBzM,GACDI,EAEC,MAAMsM,EAAmB,QAAX3O,EAEd,GAAe,SAAXA,GAAqB2O,EAAO,CAC9B,IAAIC,EAAU,eACC,QAAX5O,IACF4O,GAAW,cAEbJ,EACEzD,IAAAC,cAAA,OAAKC,UAAW2D,EAASC,wBAAyB,CAAEC,OAAQ7M,UAG9DuM,EAAQzD,IAAAC,cAAA,OAAKC,UAAU,2BAA2BhJ,GAGpD,IAAI8M,EAAa,GAWjB,OAVIJ,IACFI,EACEhE,IAAAC,cAAA,OAAKC,UAAU,WAAU,6QAS3BF,IAAAC,cAAAD,IAAA+C,SAAA,KACGiB,EACDhE,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,YACED,IAAAC,cAAA,SACExM,KAAK,WACLwQ,QAASvJ,EACTwJ,GAAG,mBACH3C,SAAUA,IAAMmC,GAAehJ,KAEjCsF,IAAAC,cAAA,SAAOkE,QAAQ,oBAAmB,8BAEpCnE,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,YACRqC,kBAAgB,EAChBxL,KAAK,QACLyL,SAAU3J,EACVuH,QAASA,IAAM0B,KAChB,WAIFF,IC1CQzP,OAFGkO,YAXOjJ,IAAK,CAC5BhE,OAAQkN,EAAoBlJ,GAC5B/B,QAASiL,GAA4BlJ,GACrCyB,WAAYyH,EAA2BlJ,KAGbuD,IAAQ,CAClCkH,cAAgBhF,GAAYlC,EboNAkC,KAAO,CACnCjL,KAF6B,kBAG7BuJ,QAAS,CAAE0B,aatN0B2D,CAAsB3D,IAC3DiF,oBAAqBA,IAAMnH,EbyNM,CAAS/I,KADf,oBarNXyO,CAA6CsB,I,+CC6OhDc,OArPWhN,IASnB,IAToB,eACzBiN,EAAc,QACdC,EAAO,KACPC,EAAI,qBACJ1O,EAAoB,YACpBoH,EAAW,kBACXuH,EAAiB,eACjBtM,EAAc,qBACduM,GACDrN,EACC,MAAMI,EAAW,CACfkN,yBAAyB,EACzBjN,cAAe,MACZwF,GAGC0H,EAAiBA,CAACjH,EAAS1K,KAC/BwR,EAAkB,IACbhN,EACH,CAACkG,GAAU1K,KAIT4R,EAAiBA,CAAC3R,EAAO4R,EAAO7R,KACpC,MAAM8R,EAAU,IAAI5M,GAEpB,GADA4M,EAAQ7R,GAAO4R,GAAS7R,EACV,YAAV6R,EAAqB,CACvB,MAAOhN,EAAOI,GAAejF,EAAM+R,MAAM,KACzCD,EAAQ7R,GAAO4E,MAAQA,EACvBiN,EAAQ7R,GAAOgF,YAAcA,EAG/BwM,EAAqBK,IAGvB,OAAKT,EAKHvE,IAAAC,cAACiF,KAAM,CACLC,sBAAoB,EACpBC,gBAAiBZ,EACjBa,kBAAgB,4BAChBC,SAAS,KACTb,KAAMA,GAENzE,IAAAC,cAACsF,KAAW,CAACrB,GAAG,6BAA4B,qBACxBlE,IAAAC,cAAA,SAAIsE,IAExBvE,IAAAC,cAACuF,KAAa,CAACC,UAAQ,GACrBzF,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,gBAAe,eAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,QACLyQ,GAAG,oBACHD,QAASvM,EAASkN,wBAClBrD,SAAUA,IAAMsD,EAAe,2BAA2B,KAE5D7E,IAAAC,cAAA,SAAOkE,QAAQ,qBAAoB,YACvBpO,EAAqB,KAEjCiK,IAAAC,cAAA,SACExM,KAAK,QACLyQ,GAAG,mBACHD,SAAUvM,EAASkN,wBACnBrD,SAAUA,IACRsD,EAAe,2BAA2B,KAG9C7E,IAAAC,cAAA,SAAOkE,QAAQ,oBAAmB,YAClCnE,IAAAC,cAAA,SACExM,KAAK,SACLP,MAAOwE,EAASC,cAChBsM,SAAUvM,EAASkN,wBACnB9D,MAAO,CAAEa,MAAO,IAChBJ,SAAWjM,GACTuP,EAAe,gBAAiBvP,EAAE2N,OAAO/P,YAOnD8M,IAAAC,cAAA,UAAI,mBAEJD,IAAAC,cAAA,SAAG,8PAI2CD,IAAAC,cAAA,SAAG,SAAS,gDACxBD,IAAAC,cAAA,SAAG,KAAM,KAACD,IAAAC,cAAA,SAAG,KAAK,6DAIpDD,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,OAAKC,UAAU,QAAO,WACtBF,IAAAC,cAAA,OAAKC,UAAU,QAAO,SACtBF,IAAAC,cAAA,OAAKC,UAAU,QAAO,gBAExBF,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UACEqD,aAAclL,EAAe,GAAG+F,QAChCoD,SAAWjM,GAAMwP,EAAe,EAAG,UAAWxP,EAAE2N,OAAO/P,QAEvD8M,IAAAC,cAAA,UAAQ/M,MAAM,IAAG,iBACjB8M,IAAAC,cAAA,UAAQ/M,MAAM,mCAAgC,uCAG9C8M,IAAAC,cAAA,UAAQ/M,MAAM,uCAAmC,4DAKrD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGL,MACzBwJ,SAAWjM,GAAMwP,EAAe,EAAG,QAASxP,EAAE2N,OAAO/P,UAGzD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGD,YACzBoJ,SAAWjM,GACTwP,EAAe,EAAG,cAAexP,EAAE2N,OAAO/P,WAMlD8M,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UACEqD,aAAclL,EAAe,GAAG+F,QAChCoD,SAAWjM,GAAMwP,EAAe,EAAG,UAAWxP,EAAE2N,OAAO/P,QAEvD8M,IAAAC,cAAA,UAAQ/M,MAAM,IAAG,iBACjB8M,IAAAC,cAAA,UAAQ/M,MAAM,mCAAgC,uCAG9C8M,IAAAC,cAAA,UAAQ/M,MAAM,uCAAmC,4DAKrD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGL,MACzBwJ,SAAWjM,GAAMwP,EAAe,EAAG,QAASxP,EAAE2N,OAAO/P,UAGzD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGD,YACzBoJ,SAAWjM,GACTwP,EAAe,EAAG,cAAexP,EAAE2N,OAAO/P,WAMlD8M,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UACEqD,aAAclL,EAAe,GAAG+F,QAChCoD,SAAWjM,GAAMwP,EAAe,EAAG,UAAWxP,EAAE2N,OAAO/P,QAEvD8M,IAAAC,cAAA,UAAQ/M,MAAM,IAAG,iBACjB8M,IAAAC,cAAA,UAAQ/M,MAAM,mCAAgC,uCAG9C8M,IAAAC,cAAA,UAAQ/M,MAAM,uCAAmC,4DAKrD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGL,MACzBwJ,SAAWjM,GAAMwP,EAAe,EAAG,QAASxP,EAAE2N,OAAO/P,UAGzD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGD,YACzBoJ,SAAWjM,GACTwP,EAAe,EAAG,cAAexP,EAAE2N,OAAO/P,WAMlD8M,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UACEqD,aAAclL,EAAe,GAAG+F,QAChCoD,SAAWjM,GAAMwP,EAAe,EAAG,UAAWxP,EAAE2N,OAAO/P,QAEvD8M,IAAAC,cAAA,UAAQ/M,MAAM,IAAG,iBACjB8M,IAAAC,cAAA,UAAQ/M,MAAM,mCAAgC,uCAG9C8M,IAAAC,cAAA,UAAQ/M,MAAM,uCAAmC,4DAKrD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGL,MACzBwJ,SAAWjM,GAAMwP,EAAe,EAAG,QAASxP,EAAE2N,OAAO/P,UAGzD8M,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAOkF,EAAe,GAAGD,YACzBoJ,SAAWjM,GACTwP,EAAe,EAAG,cAAexP,EAAE2N,OAAO/P,aAOtD8M,IAAAC,cAACyF,KAAa,KACZ1F,IAAAC,cAAC6B,KAAM,CAACG,QAASuC,EAASxC,MAAM,WAAU,WAzMvC,MCvBIE,mBAhBUjJ,IAAK,CAC5BwL,KAAMtC,EAAkClJ,GACxCkE,YAAagF,GAAyBlJ,GACtCsL,eAAgBpC,GAA+BlJ,GAC/Cb,eAAgB+J,GAA+BlJ,GAC/ClD,qBAAsBoM,EAAkClJ,KAG9BuD,IAAQ,CAClCgI,QAASA,IAAMhI,Ef8LqB,CACpC/I,KAFuC,8Be5LvCiR,kBAAoBhN,GAClB8E,EfiM8B9E,KAAQ,CACxCjE,KAFiC,sBAGjCuJ,QAAS,CAAEtF,cenMA2K,CAA0B3K,IACrCiN,qBAAuB5M,GACrByE,EfuNiCzE,KAAK,CACxCtE,KAFoC,yBAGpCuJ,QAAS,CAAEjF,WezNAsK,CAA6BtK,MAG3BmK,CAA6CoC,I,OCI7CtQ,OAFGkO,YAlBOjJ,IAAK,CAC5BzE,KAAM2N,EAAqBlJ,GAC3BhE,OAAQkN,EAAoBlJ,KAGFuD,IAAQ,CAClCmJ,SAAUA,IAAMnJ,EAAS6F,MACzBuD,YAAc3K,GAAUuB,EhBiCAvB,KAAK,CAAQxH,KADb,aAC+BuJ,QAAS,CAAE/B,WgBjCjCoH,CAAkBpH,IACnD4K,eAAgBA,CAAC5K,EAAOvE,IACtB8F,EhBmBwBsJ,EAAC7K,EAAOvE,KAAQ,CAC1CjD,KAF2B,gBAG3BuJ,QAAS,CAAE/B,QAAOvE,cgBrBP2L,CAAqBpH,EAAOvE,IACvCqP,uBAAyB9K,GACvBuB,EhBmCiCvB,KAAK,CACxCxH,KAFoC,yBAGpCuJ,QAAS,CAAE/B,WgBrCAoH,CAA6BpH,IACxC+K,kBAAmBA,CAAC/K,EAAOgL,IACzBzJ,EhBmE2B0J,EAACjL,EAAOhG,IAAW,CAACuH,EAAU2J,KAC3D,MAAMhR,EAAmBwE,EAAUwM,KAEnC/I,GAAqBZ,EAAUvB,EAAOhG,EAAQE,GAE9CqH,EAAS,CACP/I,KAP6B,oBAQ7BuJ,QAAS,CACP/B,QACAhG,agB5EOoN,CAAwBpH,EAAOgL,IAC1CG,sBAAwBnL,GACtBuB,EhBkLkCvB,KAAK,CACzCxH,KAFsC,2BAGtCuJ,QAAS,CAAE/B,WgBpLAoH,CAA8BpH,MAGzBiH,CCfU5K,IASrB,IATsB,OAC3BrC,EAAM,KACNT,EAAI,SACJmR,EAAQ,YACRC,EAAW,eACXC,EAAc,uBACdE,EAAsB,kBACtBC,EAAiB,sBACjBI,GACD9O,EACK+O,EACFrG,IAAAC,cAAA,SAAG,kEAGL,MAAMqG,EAAkBrL,IACtB,GAAe,QAAXhG,EACF,OACE+K,IAAAC,cAAA,OACEC,UAAU,cACV+B,QAASA,IAAMmE,EAAsBnL,IAErC+E,IAAAC,cAACsG,KAAY,CAACzF,MAAO,CAAE0F,SAAU,QAkDzC,OA5CIhS,EAAKb,SACP0S,EAAc7R,EAAKwG,IACjB,CAAAxD,EAA8CiP,KAAc,IAA3D,MAAExL,EAAK,SAAEvE,EAAQ,OAAEzB,EAAM,OAAE0B,EAAM,OAAEC,GAAQY,EAC1C,MAAMkP,EACH/P,GAA4B,IAAlBA,EAAOhD,OAAoB,aAAL,GAEnC,OACEqM,IAAAC,cAAA,OAAKC,UAAU,aAAatB,IAAK6H,GAC/BzG,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAC0G,GAAc,CACbzT,MAAOwD,EACP6K,SAAWqF,GAAgBf,EAAe5K,EAAO2L,MAGrD5G,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,SACExM,KAAK,WACLwQ,QAASrN,EACT2K,SAAUA,IAAMwE,EAAuB9K,GACvCiJ,GAAOjJ,EAAH,YAEN+E,IAAAC,cAAA,SAAOkE,QAAYlJ,EAAH,WAAmB,WAErC+E,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAO+B,EACPiL,UAAWwG,EACXnF,SAAWjM,IACTuR,QAAQC,IAAIxR,EAAE2N,OAAO/P,OACrB8S,EAAkB/K,EAAO3F,EAAE2N,OAAO/P,WAIvCoT,EAAerL,GAChB+E,IAAAC,cAAA,OAAKC,UAAU,YAAY+B,QAASA,IAAM2D,EAAY3K,IACpD+E,IAAAC,cAAC8G,KAAU,CAACjG,MAAO,CAAE0F,SAAU,WASzCxG,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,OAAKC,UAAU,gBAAgBmG,GAC/BrG,IAAAC,cAAA,QACEC,UAAU,OACV+B,QAAU3M,IACRA,EAAE0R,iBACFrB,MAEH,gBAID3F,IAAAC,cAACuD,GAAY,MACbxD,IAAAC,cAACqE,GAAiB,SCsGT2C,OAjME3P,IAQV,IARW,OAChBrC,EAAM,gBACNiS,EAAe,gBACftR,EAAe,eACfC,EAAc,oBACdF,EAAmB,mBACnBG,EAAkB,qBAClBC,GACDuB,EAsJC,OACE0I,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,gBAAe,UAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,QACLyQ,GAAG,aACHD,QAAoB,SAAXhP,EACTsM,SAAUA,IAAM2F,EAAgB,SAAU,UAE5ClH,IAAAC,cAAA,SAAOkE,QAAQ,cAAa,QAC5BnE,IAAAC,cAAA,SACExM,KAAK,QACLyQ,GAAG,YACHD,QAAoB,QAAXhP,EACTsM,SAAUA,IAAM2F,EAAgB,SAAU,SAE5ClH,IAAAC,cAAA,SAAOkE,QAAQ,aAAY,OAC3BnE,IAAAC,cAAA,SACExM,KAAK,QACLyQ,GAAG,aACHD,QAAoB,SAAXhP,EACTsM,SAAUA,IAAM2F,EAAgB,SAAU,UAE5ClH,IAAAC,cAAA,SAAOkE,QAAQ,cAAa,QAxDnB,SAAXlP,EAEA+K,IAAAC,cAAA,OAAKC,UAAU,OAAM,mCACaF,IAAAC,cAAA,SAAG,OAAO,sFAMjC,QAAXhL,EAEA+K,IAAAC,cAAA,OAAKC,UAAU,OAAM,kBACJF,IAAAC,cAAA,SAAG,oBAAoB,2RAS7B,SAAXhL,EAEA+K,IAAAC,cAAA,OAAKC,UAAU,OAAM,8GAFzB,IA3Ic5G,MACd,IAAI9E,EAAO,GAiHX,MAhHe,SAAXS,IACFT,EAAKM,KACHkL,IAAAC,cAAA,OAAKrB,IAAI,eACPoB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,gBAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,SACLP,MAAO0C,EACPkL,MAAO,CAAEa,MAAO,IAChBJ,SAAWjM,GACT4R,EAAgB,kBAAmB5R,EAAE2N,OAAO/P,MAAO,MAErD,KAEF8M,IAAAC,cAAA,OAAKC,UAAU,OAAM,2LAGwC,IAC3DF,IAAAC,cAAA,SAAG,aAAa,qJAOxBzL,EAAKM,KACHkL,IAAAC,cAAA,OAAKrB,IAAI,kBACPoB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,qBAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,OACLP,MAAO2C,EACP0L,SAAWjM,GACT4R,EAAgB,iBAAkB5R,EAAE2N,OAAO/P,SAI/C8M,IAAAC,cAAA,OAAKC,UAAU,OAAM,+KAInBF,IAAAC,cAAA,SAAG,WAAY,gBAAYD,IAAAC,cAAA,SAAG,YAAY,oMAGI,IAC9CD,IAAAC,cAAA,SAAG,mBAAmB,iFAOjB,SAAXhL,GAAgC,QAAXA,GACvBT,EAAKM,KACHkL,IAAAC,cAAA,OAAKrB,IAAI,iBACPoB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,wBAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,SACLP,MAAOyC,EACPmL,MAAO,CAAEa,MAAO,IAChBJ,SAAWjM,GACT4R,EAAgB,sBAAuB5R,EAAE2N,OAAO/P,MAAO,MAI3D8M,IAAAC,cAAA,OAAKC,UAAU,OAAM,0MAIVF,IAAAC,cAAA,SAAG,aAAa,wJAQpB,QAAXhL,IACFT,EAAKM,KACHkL,IAAAC,cAAA,OAAKrB,IAAI,sBACPoB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,qBAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,SACLP,MAAO4C,EACPgL,MAAO,CAAEa,MAAO,IAChBJ,SAAWjM,GACT4R,EAAgB,qBAAsB5R,EAAE2N,OAAO/P,SAEhD,IAAI,QAKbsB,EAAKM,KACHkL,IAAAC,cAAA,OAAKrB,IAAI,wBACPoB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,uBAC9BF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACExM,KAAK,SACLP,MAAO6C,EACP+K,MAAO,CAAEa,MAAO,IAChBJ,SAAWjM,GACT4R,EAAgB,uBAAwB5R,EAAE2N,OAAO/P,aAQtDsB,GAiEJ8E,KCzKQtF,OAFGkO,YAdOjJ,IAAK,CAC5BhE,OAAQkN,EAAoBlJ,GAC5BtD,oBAAqBwM,EAAiClJ,GACtDrD,gBAAiBuM,EAA6BlJ,GAC9CpD,eAAgBsM,EAA4BlJ,GAC5CnD,mBAAoBqM,EAAgClJ,GACpDlD,qBAAsBoM,EAAkClJ,KAG9BuD,IAAQ,CAClC0K,gBAAiBA,CAACC,EAAajU,IAC7BsJ,EAAS6F,GAAsB8E,EAAajU,MAG9BgP,CAA6C+E,IC0FhDG,OA3GFA,IACXpH,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,WAAK,mRAOLD,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SAAG,wBACqB,IACtBD,IAAAC,cAAA,KACE+C,KAAK,6BACLC,OAAO,SACPoE,IAAI,uBACL,gBAEI,IAAI,0DAC+C,IACxDrH,IAAAC,cAAA,SAAG,gBAAgB,2HAIrBD,IAAAC,cAAA,UACED,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAI,gBAAmB,uFAGzBD,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAI,8CAAiD,qCACtCD,IAAAC,cAAA,SAAG,OAAO,kIAI3BD,IAAAC,cAAA,UAAI,yHAE8C,IAChDD,IAAAC,cAAA,SAAI,iDAAoD,6FAM5DD,IAAAC,cAAA,UAAI,iBAEJD,IAAAC,cAAA,SAAG,4GAGDD,IAAAC,cAAA,SAAG,2BAA2B,sKAIhCD,IAAAC,cAAA,SAAG,OACGD,IAAAC,cAAA,SAAG,6BAA6B,8UAKhCD,IAAAC,cAAA,SAAG,OAAO,4FAIhBD,IAAAC,cAAA,UAAI,wBAEJD,IAAAC,cAAA,SAAG,gZASHD,IAAAC,cAAA,UACED,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,QAAQ,KAAG,MAAM,8DAGtBD,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,UAAU,KAAG,MAAM,KAExBD,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,aAAa,KAAG,MAAM,KAE3BD,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,eAAe,KAAG,OAAO,YAASD,IAAAC,cAAA,SAAG,SAAS,sJAInDD,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,QAAQ,KAAG,SAAS,kFACaD,IAAAC,cAAA,SAAG,gBAAgB,8LAIvDD,IAAAC,cAAA,SAAI,+BAEND,IAAAC,cAAA,UACED,IAAAC,cAAA,SAAG,WAAW,KAAG,YAAY,mFACc,IAC3CD,IAAAC,cAAA,SAAI,6B,OCzBGqH,OAtEoBhQ,IAM5B,IAN6B,WAClCiQ,EAAU,MACV9I,EAAK,WACL+I,EAAU,YACVC,EAAW,gBACXC,GACDpQ,EACC,MAAOI,EAAUiQ,GAAe3H,IAAMmB,SAAS,IAc/C,OACEnB,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,UACNC,QAASuF,GACV,uBAIDxH,IAAAC,cAACiF,KAAM,CACLC,sBAAoB,EACpBC,gBAAiBqC,EACjBpC,kBAAgB,4BAChBC,SAAS,KACTb,KAAM8C,GAENvH,IAAAC,cAACsF,KAAW,CAACrB,GAAG,6BAA4B,uBAG5ClE,IAAAC,cAACuF,KAAa,CAACC,UAAQ,GACrBzF,IAAAC,cAAA,WAAK,wHAjCNxB,EAKHuB,IAAAC,cAAA,OAAKC,UAAU,SAAQ,mDAC4BzB,GAL5C,KAuCHuB,IAAAC,cAAA,YACE2H,WAAS,EACT1H,UAAU,qBACVqB,SAAWjM,GAAMqS,EAAYrS,EAAE2N,OAAO/P,OACtCA,MAAOwE,KAGXsI,IAAAC,cAACyF,KAAa,KACZ1F,IAAAC,cAAC6B,KAAM,CAACG,QAASA,IAAMyF,EAAgBhQ,GAAWsK,MAAM,WAAU,WAGlEhC,IAAAC,cAAC6B,KAAM,CAACG,QAASwF,EAAazF,MAAM,WAAU,aCpDzCE,mBAZUjJ,IAAK,CAC5BsO,WAAYpF,EAAoClJ,GAChDwF,MAAO0D,EAA2BlJ,KAGRuD,IAAQ,CAClCkL,gBAAkBG,GAChBrL,EtBoH4BqL,IAAiBrL,IAC/CA,EAjBgC,CAAS/I,KADP,yBAoBlC,IACE,MAAMiE,EAAWsE,KAAK1D,MAAMuP,GAIxBnQ,EAASlD,MAAQsT,MAAMC,QAAQrQ,EAASlD,QAC1CgI,EAzFmB,CAAS/I,KADR,eA2FpBiE,EAASlD,KAAKE,QAASC,IAElBA,EAAIqT,eAAe,aACnBrT,EAAIqT,eAAe,WACnBrT,EAAIqT,eAAe,aAIH,IAAfrT,EAAIiC,SAAkC,IAAfjC,EAAIiC,QAG/B4F,EACEU,GAAO,CACLxG,SAAU/B,EAAI+B,SACdE,OAAQjC,EAAIiC,OACZ3B,OAAQN,EAAIM,OACZyC,SAAU/C,EAAI+C,SACdU,eAAgBzD,EAAIyD,sBAO1BV,EAASzC,SAC6C,IAAtD,CAAC,OAAQ,MAAO,QAAQ7B,QAAQsE,EAASzC,SAEzCuH,EAASmB,GAAc,SAAUjG,EAASzC,SAExCyC,EAAS/B,qBACX6G,EACEmB,GAAc,sBAAuBjG,EAAS/B,sBAG9C+B,EAAS9B,iBACX4G,EAASmB,GAAc,kBAAmBjG,EAAS9B,kBAEjD8B,EAAS7B,gBACX2G,EAASmB,GAAc,iBAAkBjG,EAAS7B,iBAGpD2G,EAASkB,MAETpK,EAAiB,QAAS,oCAC1B,MAAOgC,GACPkH,EApEsC,CACxC/I,KAFoC,yBAGpCuJ,QAAS,CACPyB,MAiE8BnJ,EAAE9B,asB3KvB6O,CAAwBwF,IACnCL,WAAYA,IAAMhL,EtB+KmB,CACrC/I,KAFwC,+BsB7KxCgU,YAAaA,IAAMjL,EAAS6F,QAGfH,CAGb+F,I,OCFajU,OAFGkO,YAXOjJ,IAAK,CAC5BiC,gBAAiBiH,EAA0BlJ,GAC3CS,WAAYyI,EAAwBlJ,GACpCiP,YAAa/F,EAAyBlJ,KAGZuD,IAAQ,CAClC4F,aAAe7F,GAASC,EAAS6F,GAAmB9F,IACpD4L,cAAgB3J,GAAQhC,EvBuFIgC,KAAG,CAC/B/K,KAF6B,kBAG7BuJ,QAAS,CAAEwB,SuBzFsB6D,CAAsB7D,MAGvC0D,CCLG5K,IAAA,IAAC,OACpBiL,EAAM,OACNtB,EAAM,WACNvH,EAAU,YACVwO,EAAW,cACXC,GACD7Q,EAAA,OACC0I,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,MAAIC,UAAU,oBAAoBgI,EAAY,cAE9ClI,IAAAC,cAACmB,KAAI,CACHlO,MAAOwG,EACP2H,eAAe,UACfC,UAAU,UACVC,SAAUA,CAACjM,EAAGkM,IAAa2G,EAAc3G,IAEzCxB,IAAAC,cAACwB,KAAG,CAACrB,MAAM,UACXJ,IAAAC,cAACwB,KAAG,CAACrB,MAAM,aACXJ,IAAAC,cAACwB,KAAG,CAACrB,MAAM,UAEbJ,IAAAC,cAACW,GAAQ,CAAC1N,MAAOwG,EAAYvG,MAAO,GAClC6M,IAAAC,cAACmI,GAAY,MACbpI,IAAAC,cAAA,cACED,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,YACNC,QAASM,EACTzB,MAAO,CAAEsC,YAAa,GAAIC,SAAU,KACrC,QAGDrD,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,UACNC,QAAShB,GACV,mBAKLjB,IAAAC,cAACW,GAAQ,CAAC1N,MAAOwG,EAAYvG,MAAO,GAClC6M,IAAAC,cAACgH,GAAQ,MACTjH,IAAAC,cAAA,WACAD,IAAAC,cAACgI,GAAmB,OAEtBjI,IAAAC,cAACW,GAAQ,CAAC1N,MAAOwG,EAAYvG,MAAO,GAClC6M,IAAAC,cAACmH,GAAI,U,6BCjCIiB,OApBY/Q,IAAkB,IAAjB,QAAEJ,GAASI,EAKrC,OACE0I,IAAAC,cAACqI,mBAAe,CAACxP,KAAM5B,EAASqR,OAAQA,KAJxCjV,EAAiB,UAAW,iDAK1B0M,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,YACRqC,kBAAgB,EAChBxL,KAAK,QACLoJ,MAAM,UACNwG,UAAWxI,IAAAC,cAACwI,KAAQ,OACrB,uB,oBCMQC,OApBYpR,IAA8B,IAA7B,QAAEJ,EAAO,MAAE4J,EAAQ,IAAIxJ,EAKjD,OACE0I,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,YACRqC,kBAAgB,EAChBxL,KAAK,QACLoJ,MAAM,UACNwG,UAAWxI,IAAAC,cAAC0I,KAAM,MAClB1G,QAXYA,K5BuPU2G,EAACnT,EAAMoT,EAAUpV,KAC3C,IAAI8I,EAAO,IAAIuM,KAAK,CAACrT,GAAO,CAAEhC,KAAMA,IACpC,MAAMsV,EAAIC,SAAS/I,cAAc,KAC3BgJ,EAAMC,IAAIC,gBAAgB5M,GAChCwM,EAAE/F,KAAOiG,EACTF,EAAEK,SAAWP,EACbG,SAASK,KAAKC,YAAYP,GAC1BA,EAAEQ,QAEFC,YAAW,WACTR,SAASK,KAAKI,YAAYV,GAC1B1J,OAAO6J,IAAIQ,gBAAgBT,KAC1B,I4BlQDL,CAAa1R,EAAS,gBAAiB,QAWrC4J,MAAOA,GACR,a,OCwBU6I,OAlCQrS,IAAA,IAAC,QAAEkN,EAAO,KAAEC,EAAI,YAAEoD,GAAavQ,EAAA,OACpD0I,IAAAC,cAACiF,KAAM,CACLC,sBAAoB,EACpBC,gBAAiBZ,EACjBa,kBAAgB,4BAChBC,SAAS,KACTb,KAAMA,GAENzE,IAAAC,cAACsF,KAAW,CAACrB,GAAG,6BAA4B,iBAC5ClE,IAAAC,cAACuF,KAAa,CAACC,UAAQ,GACrBzF,IAAAC,cAAA,WAAK,6iBAYLD,IAAAC,cAAA,OAAKC,UAAU,mBAAmB2H,GAElC7H,IAAAC,cAACoI,GAAkB,CAACnR,QAAS2Q,KAE/B7H,IAAAC,cAACyF,KAAa,KACZ1F,IAAAC,cAAC6B,KAAM,CAAC8F,WAAS,EAAC3F,QAASuC,EAASxC,MAAM,WAAU,YC5B3CE,mBAJUjJ,IAAK,CAC5B4O,YAAa1F,GAAyBlJ,KAGzBiJ,CAAyB+E,I,OCMzBjT,OAFGkO,YAROjJ,IAAK,CAC5BhE,OAAQkN,EAAoBlJ,GAC5B2Q,iBAAkBzH,GAA8BlJ,GAChD4Q,aAAc1H,GAA0BlJ,KAGf6Q,KAAA,IAET5H,CCFG5K,IAMd,IANe,OACpBiL,EAAM,SACNwH,EAAQ,OACR9U,EAAM,iBACN2U,EAAgB,aAChBC,GACDvS,EACC,MAAOkH,EAAK0C,GAAUlB,IAAMmB,SAAS,IAC9B6I,EAAoBC,GACzBjK,IAAMmB,UAAS,GAqEjB,OACEnB,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,UAAI,SArEWiK,MACjB,GAAe,SAAXjV,EAAmB,CACrB,MAAMkV,EAAkB,4CAG5BN,iCAIAD,sBAII,OACE5J,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,SAAG,iGAKHD,IAAAC,cAACmB,KAAI,CACHlO,MAAOsL,EACP6C,eAAe,UACfC,UAAU,UACVC,SAAUA,CAACjM,EAAGkM,IAAaN,EAAOM,IAElCxB,IAAAC,cAACwB,KAAG,CAACrB,MAAM,SACXJ,IAAAC,cAACwB,KAAG,CAACrB,MAAM,QACXJ,IAAAC,cAACwB,KAAG,CAACrB,MAAM,sBAEbJ,IAAAC,cAACW,GAAQ,CAAC1N,MAAOsL,EAAKrL,MAAO,GAC3B6M,IAAAC,cAAA,OAAKC,UAAU,iBAAiB0J,GAChC5J,IAAAC,cAAA,OAAKa,MAAO,CAAEsJ,MAAO,UACnBpK,IAAAC,cAACoI,GAAkB,CAACnR,QAAS0S,MAGjC5J,IAAAC,cAACW,GAAQ,CAAC1N,MAAOsL,EAAKrL,MAAO,GAC3B6M,IAAAC,cAAA,OAAKC,UAAU,iBAAiB2J,GAChC7J,IAAAC,cAAA,OAAKa,MAAO,CAAEsJ,MAAO,UACnBpK,IAAAC,cAACoI,GAAkB,CAACnR,QAAS2S,MAGjC7J,IAAAC,cAACW,GAAQ,CAAC1N,MAAOsL,EAAKrL,MAAO,GAC3B6M,IAAAC,cAAA,OAAKC,UAAU,iBAAiBiK,GAChCnK,IAAAC,cAAA,OAAKa,MAAO,CAAEsJ,MAAO,UACnBpK,IAAAC,cAACoI,GAAkB,CAACnR,QAASiT,OAOvC,IAAIE,EAASrK,IAAAC,cAACoI,GAAkB,CAACnR,QAAS0S,IAK1C,MAJe,QAAX3U,IACFoV,EAASrK,IAAAC,cAACyI,GAAkB,CAACxR,QAAS0S,KAItC5J,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAAA,SAAG,oDAEHD,IAAAC,cAAA,OAAKC,UAAU,iBAAiB0J,GAChC5J,IAAAC,cAAA,OAAKa,MAAO,CAAEsJ,MAAO,UAAYC,KASlCH,GAEDlK,IAAAC,cAAC0J,GAAc,CACblF,KAAMuF,EACNxF,QAASA,IAAMyF,GAA4B,KAG7CjK,IAAAC,cAAA,WACAD,IAAAC,cAAA,cACED,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,YACNC,QAASM,EACTzB,MAAO,CAAEsC,YAAa,GAAIC,SAAU,KACrC,QAGDrD,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,UACNC,QAAS8H,GACV,eAGD/J,IAAAC,cAAA,QAAMC,UAAU,iBAAgB,KAEhCF,IAAAC,cAAC6B,KAAM,CACLC,QAAQ,WACRnJ,KAAK,QACLoJ,MAAM,UACNC,QAASA,IAAMgI,GAA4B,IAC5C,qBC3GT,MAAMK,GAAQC,aAAY,CACxBC,WAAY,CACVC,WAAY,CAAC,YAAa,cAAc3O,KAAK,QAI3C4O,GAAYC,aAAYL,IAAK,CACjCM,KAAM,CACJC,SAAU,GAEZC,WAAY,CACV1H,YAAakH,EAAMS,QAAQ,IAE7BxX,MAAO,CACLsX,SAAU,EACVG,QAAS,WAIPlL,GAAQ,CAAC,QAAS,cAAe,kBAAmB,YA4E3CmL,OA1EF3T,IAKN,IALO,KACZ7B,EAAI,UACJ4D,EAAS,aACT6R,EAAY,oCACZC,GACD7T,EACC,MAAMuM,EAAU6G,KAEhBU,oBAAU,KACJ3V,IACFlB,EAA+BkB,GAC/B0V,MAGD,CAAC1V,IA+BJ,OACEuK,IAAAC,cAACoL,KAAa,CAACf,MAAOA,IACpBtK,IAAAC,cAAAD,IAAA+C,SAAA,KACE/C,IAAAC,cAACqL,KAAM,CAACC,SAAS,QAAQrL,UAAU,UACjCF,IAAAC,cAACuL,KAAO,KACNxL,IAAAC,cAACwL,KAAU,CAAC1J,QAAQ,KAAK7B,UAAW2D,EAAQtQ,OAC1CyM,IAAAC,cAACyL,KAAoB,CAACxL,UAAU,gBAAgB,uBAGlDF,IAAAC,cAAA,WACED,IAAAC,cAAC0L,KAAU,CACTC,aAAW,SACX1L,UAAW2D,EAAQgI,OACnB5J,QAASA,IAAM5C,OAAOoF,KAAK1G,GAAc,WAEzCiC,IAAAC,cAAC6L,KAAU,UAKnB9L,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACJ,GAAO,CAACC,MAAOA,GAAOC,WAAY1G,IAjDvB,IAAdA,EACK2G,IAAAC,cAACe,GAAK,CAACC,OAAQA,IAAMiK,EAAa7R,EAAY,KAC9B,IAAdA,EAEP2G,IAAAC,cAAC8L,GAAK,CACJxJ,OAAQA,IAAM2I,EAAa7R,EAAY,GACvC4H,OAAQA,IAAMiK,EAAa7R,EAAY,KAGpB,IAAdA,EAEP2G,IAAAC,cAAC+L,GAAK,CACJzJ,OAAQA,IAAM2I,EAAa7R,EAAY,GACvC4H,OAAQA,IAAMiK,EAAa7R,EAAY,KAGpB,IAAdA,EAEP2G,IAAAC,cAACgM,GAAK,CACJ1J,OAAQA,IAAM2I,EAAa7R,EAAY,GACvC0Q,SAAUA,IAAMmB,EAAa7R,EAAY,KAKxC,SC/DIrF,OAFGkO,YAXOjJ,IAAK,CAC5BI,UAAW8I,EAAuBlJ,GAClCxD,KAAM0M,EAAkBlJ,KAGEuD,IAAQ,CAClC0O,aAAe7R,GAAcmD,EhCgBFnD,KAAS,CACpC5F,KAF4B,iBAG5BuJ,QAAS,CAAE3D,egClB2BgJ,CAAqBhJ,IAC3D8R,oCAAqCA,IACnC3O,EhC6C+C,CACjD/I,KAFA,0CAGAuJ,QAAS,CAAE9J,OAAO,OgC5CFgP,CAA6C+I,I,qBCahDiB,OATHA,IACRlM,IAAAC,cAACkM,IAAQ,CAACtY,MAAOA,IACbmM,IAAAC,cAACmM,IAAW,CAACC,QAAS,KAAM1M,UAAWA,GAAW2M,aAAcA,IATrDC,WlCVgBtT,IAAUA,EAAMvB,SAASoG,gBkCW/BqE,CAA6BlJ,EAAMkN,cACnCpI,UACrB9E,EAAMuD,SjC6FO,CAAS/I,KAAM,WiCvF0C+Y,CAAW3Y,KAC7EmM,IAAAC,cAACwM,IAAiB,MAClBzM,IAAAC,cAACgL,GAAI,QCZGyB,QACW,cAA7BrN,OAAOsN,SAASC,UAEe,UAA7BvN,OAAOsN,SAASC,UAEhBvN,OAAOsN,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL/M,IAAAC,cAACD,IAAMgN,WAAU,KACbhN,IAAAC,cAACiM,GAAG,OAERlD,SAASiE,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtQ,KAAMuQ,IACLA,EAAaC,eAEdC,MAAO9O,IACNoI,QAAQpI,MAAMA,EAAMjL,Y","file":"static/js/main.c3bee969.chunk.js","sourcesContent":["import { store } from 'react-notifications-component';\n\nexport const removeArrayItem = (arr, value) => {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n  return arr;\n};\n\nexport const showNotification = (title, message, type = 'success') => {\n  store.addNotification({\n    title,\n    message,\n    type,\n    insert: 'top',\n    container: 'top-center',\n    animationIn: ['animate__animated', 'animate__fadeIn'],\n    animationOut: ['animate__animated', 'animate__fadeOut'],\n    dismiss: {\n      duration: 5000,\n      showIcon: true,\n    },\n  });\n};\n","import * as squirrelly from 'squirrelly';\nimport Parser from 'html-tokenizer/parser';\n\n// helper method to parse the CSV data (in JSON format) and return an array of rows to be output\nexport const getBuilderLines = (data, rowConfig, generationFormat) => {\n  const lastSeenColValues = [];\n  const lines = [];\n  const numConfigRows = rowConfig.length;\n  const rowPlaceholders = getDocumentRowPlaceholders();\n\n  for (let row = 1; row < data.length; row++) {\n    // see bug: https://github.com/IMERSS/checklist-generator/issues/5\n    if (data[row].length === 1 && data[row][0] === '') {\n      continue;\n    }\n\n    let currIndent = 0;\n    let lastValueWasAlreadySeen = false;\n\n    rowConfig.forEach((config, uiRowIndex) => {\n      const { colIndex, format, errors, indent } = config;\n      const colValue = data[row][colIndex];\n\n      currIndent = indent ? currIndent + 1 : currIndent;\n\n      // if we've already output this item, don't add it again\n      if (lastSeenColValues[colIndex] === colValue) {\n        lastValueWasAlreadySeen = true;\n        return;\n      }\n\n      // see bug: https://github.com/IMERSS/checklist-generator/issues/2\n      if (lastValueWasAlreadySeen && uiRowIndex !== 0) {\n        for (let k = uiRowIndex + 1; k < numConfigRows; k++) {\n          const obsoleteCacheRow = rowConfig[k].colIndex;\n          lastSeenColValues[obsoleteCacheRow] = null;\n        }\n      }\n\n      lastValueWasAlreadySeen = false;\n\n      const placeholders = rowPlaceholders[row];\n      const hasErrors = errors && errors.length > 0;\n\n      lines.push({\n        colIndex,\n        uiRowIndex,\n        value: getFormattedCell(\n          format,\n          hasErrors,\n          { VALUE: colValue, ...placeholders },\n          generationFormat\n        ),\n        indent: currIndent,\n      });\n\n      lastSeenColValues[colIndex] = colValue;\n    });\n  }\n\n  return lines;\n};\n\nlet documentRowPlaceholders = [];\nexport const computeDocumentRowPlaceholders = (rows) => {\n  const result = [];\n  rows.forEach((row) => {\n    const placeholders = {};\n    row.forEach((i, index) => {\n      placeholders['COL' + (index + 1)] = i;\n    });\n    result.push(placeholders);\n  });\n  documentRowPlaceholders = result;\n};\n\nexport const getDocumentRowPlaceholders = () => documentRowPlaceholders;\n\nexport const getFormattedCell = (\n  format,\n  hasError,\n  placeholders,\n  generationFormat\n) => {\n  let errorStr = 'invalid syntax for this row';\n  let value =\n    generationFormat === 'html' || generationFormat === 'rtf'\n      ? `<span class=\"invalidRow\">${errorStr}</span>`\n      : `--- ${errorStr} ---`;\n\n  if (hasError) {\n    return value;\n  }\n\n  try {\n    value = squirrelly.render(format, placeholders);\n  } catch (e) {\n    // console.log(\"error parsing: \", e);\n  }\n  return value;\n};\n\nexport const convertKnownHtmlCharsToRtf = (content) => {\n  const data = Parser.parse(content);\n\n  let rtfStr = '';\n  let openFontTags = false;\n  for (const token of data) {\n    if (token.type === 'open') {\n      if (token.name === 'b') {\n        rtfStr += '{\\\\b ';\n      }\n      if (token.name === 'i') {\n        rtfStr += '{\\\\i ';\n      }\n      if (token.name === 'u') {\n        rtfStr += '{\\\\ul ';\n      }\n      if (token.name === 'br') {\n        rtfStr += '\\\\line';\n      }\n\n      if (token.name === 'font') {\n        if (token.attributes && token.attributes.size) {\n          rtfStr += `{\\\\fs${parseInt(token.attributes.size.trim(), 10) * 2}`;\n          openFontTags++;\n        }\n      }\n      if (token.name === 'noStyle') {\n        rtfStr += '{\\\\b0\\\\i0\\\\ul0 ';\n      }\n    }\n\n    if (token.type === 'close') {\n      if (token.name === 'i' || token.name === 'b' || token.name === 'u') {\n        rtfStr += '}';\n      }\n      if (token.name === 'font' && openFontTags > 0) {\n        rtfStr += '}';\n        openFontTags--;\n      }\n      if (token.name === 'noStyle') {\n        rtfStr += '}';\n      }\n    }\n\n    if (token.type === 'text') {\n      rtfStr += token.text;\n    }\n  }\n\n  return rtfStr;\n};\n\nexport const applyArbitraryRegex = (str, regex) => {\n  let newStr = str;\n\n  regex.forEach((row) => {\n    if (row.regex) {\n      const regex = new RegExp(row.regex);\n      newStr = newStr.replace(regex, row.replacement);\n    }\n  });\n\n  return newStr;\n};\n\n/**\n * colIndex: the index of the column in the original data set\n * uiRowIndex: how indented the particular entry should be.\n */\nexport const getBuilderContent = (\n  isPreview,\n  data,\n  rowData,\n  format,\n  textIndentNumSpaces,\n  htmlIndentWidth,\n  rowClassPrefix,\n  rtfDefaultFontSize,\n  rtfDefaultLineHeight\n) => {\n  const lines = getBuilderLines(data, rowData, format);\n  let content = '';\n\n  const textSpaces = parseInt(textIndentNumSpaces || 0, 10);\n  const htmlIndent = parseInt(htmlIndentWidth || 0, 10);\n\n  // a little inelegant, but for previewing we just generate HTML with the indentation hardcoded. For the actual\n  // generation we generate the final markup with the appropriate CSS separately\n  if (isPreview) {\n    lines.forEach(({ value, indent }) => {\n      if (format === 'html' || format === 'rtf') {\n        const pxWidth = (indent - 1) * htmlIndent;\n        content += `<div style=\"padding-left: ${pxWidth}px\">${value}</div>`;\n      } else {\n        content += ' '.repeat((indent - 1) * textSpaces) + value + '\\n';\n      }\n    });\n  } else {\n    lines.forEach(({ value, colIndex, uiRowIndex, indent }) => {\n      if (format === 'html') {\n        const cls = `${rowClassPrefix}${colIndex + 1} ${rowClassPrefix}indent-${indent}`;\n        content += `<div class=\"${cls}\">${value}</div>\\n`;\n      } else if (format === 'rtf') {\n        const lineHeight =\n          rowData[uiRowIndex].settings &&\n          rowData[uiRowIndex].settings.rtfLineHeight\n            ? rowData[uiRowIndex].settings.rtfLineHeight\n            : rtfDefaultLineHeight;\n\n        const updatedStr = applyArbitraryRegex(\n          value,\n          rowData[uiRowIndex].arbitraryRegex\n        );\n\n        content +=\n          `{\\\\pard\\\\sa${lineHeight} ` +\n          (' '.repeat((indent - 1) * textSpaces) +\n            convertKnownHtmlCharsToRtf(updatedStr)) +\n          ' \\\\par}\\n';\n      } else {\n        content += ' '.repeat((indent - 1) * textSpaces) + value + '\\n';\n      }\n    });\n\n    if (format === 'rtf') {\n      // RTF font sizes are \"half-points\", so we double them\n      content = `{\\\\rtf1\\\\ansi\\\\deff0\\\\fs${rtfDefaultFontSize * 2}\\n${content}\\n}\\n`;\n    }\n  }\n\n  return content;\n};\n\nexport const validateRtfRow = (rowString) => {\n  const data = Parser.parse(rowString);\n\n  const invalidTags = [];\n  const validTags = ['b', 'i', 'u', 'br', 'font', 'noStyle'];\n\n  for (const token of data) {\n    if (token.type === 'open') {\n      if (validTags.indexOf(token.name) === -1) {\n        invalidTags.push(token.name);\n      }\n    }\n  }\n\n  return invalidTags;\n};\n\n// creates a file and prompts for download\nexport const downloadFile = (data, filename, type) => {\n  let file = new Blob([data], { type: type });\n  const a = document.createElement('a');\n  const url = URL.createObjectURL(file);\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function () {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n","import { createSelector } from 'reselect';\nimport { getBuilderContent } from '../../helpers/builder';\n\nexport const getAppStateVersion = (state) => state.settings.appStateVersion;\nexport const getData = (state) => state.settings.data;\nexport const getUploadedFilename = (state) => state.settings.uploadedFilename;\nexport const getPageIndex = (state) => state.settings.pageIndex;\nexport const getRows = (state) => state.settings.rows;\nexport const getSortedRows = (state) => state.settings.sortedRows;\nexport const getBuilderTab = (state) => state.settings.builderTab;\nexport const getFormat = (state) => state.settings.format;\nexport const getTextIndentNumSpaces = (state) =>\n  state.settings.textIndentNumSpaces;\nexport const getHtmlIndentWidth = (state) => state.settings.htmlIndentWidth;\nexport const getRowClassPrefix = (state) => state.settings.rowClassPrefix;\nexport const getRtfDefaultFontSize = (state) =>\n  state.settings.rtfDefaultFontSize;\nexport const getRtfDefaultLineHeight = (state) =>\n  state.settings.rtfDefaultLineHeight;\nexport const getSettingsError = (state) => state.settings.loadSettingsError;\nexport const getEditingRowId = (state) => state.settings.editingRowId;\nexport const isApplySettingsDialogOpen = (state) =>\n  state.settings.applySettingsDialogOpen;\nexport const isRowSettingsDialogOpen = (state) =>\n  state.settings.rowSettingsDialogOpen;\nexport const shouldAutoUpdate = (state) => state.settings.autoUpdate;\nexport const getRegenerationCount = (state) => state.settings.regenerationCount;\nexport const isDocumentRowPlaceholdersGenerated = (state) =>\n  state.settings.documentRowPlaceholdersGenerated;\n\nexport const getFormatLabel = createSelector(getFormat, (format) => {\n  const map = {\n    html: 'HTML',\n    rtf: 'RTF',\n    text: 'Text',\n  };\n  return map[format];\n});\nexport const getRowData = createSelector(\n  getSortedRows,\n  getRows,\n  (sortedRows, rows) => {\n    return sortedRows.map((rowId) => {\n      return {\n        ...rows[rowId],\n        rowId,\n      };\n    });\n  }\n);\n\nexport const hasUploadedData = createSelector(getData, (data) => data !== null);\n\nexport const getColumns = createSelector(getData, (data) => {\n  if (!data.length) {\n    return [];\n  }\n  return data[0];\n});\n\nlet lastRegenerationCount;\nlet lastBuilderContent;\nexport const getPreviewContent = createSelector(\n  shouldAutoUpdate,\n  isDocumentRowPlaceholdersGenerated,\n  getRegenerationCount,\n  getData,\n  getRowData,\n  getFormat,\n  getTextIndentNumSpaces,\n  getHtmlIndentWidth,\n  (\n    autoUpdate,\n    documentRowPlaceholdersGenerated,\n    regenerationCount,\n    data,\n    rowData,\n    format,\n    textIndentNumSpaces,\n    htmlIndentWidth\n  ) => {\n    if (!documentRowPlaceholdersGenerated) {\n      return '';\n    }\n\n    if (\n      !autoUpdate &&\n      regenerationCount === lastRegenerationCount &&\n      lastBuilderContent\n    ) {\n      return lastBuilderContent;\n    }\n    lastRegenerationCount = regenerationCount;\n    lastBuilderContent = getBuilderContent(\n      true,\n      data,\n      rowData,\n      format,\n      textIndentNumSpaces,\n      htmlIndentWidth\n    );\n\n    return lastBuilderContent;\n  }\n);\n\nexport const getGeneratedContent = createSelector(\n  getData,\n  getRowData,\n  getFormat,\n  getTextIndentNumSpaces,\n  getHtmlIndentWidth,\n  getRowClassPrefix,\n  getRtfDefaultFontSize,\n  getRtfDefaultLineHeight,\n  (\n    data,\n    rowData,\n    format,\n    textIndentNumSpaces,\n    htmlIndentWidth,\n    rowClassPrefix,\n    rtfDefaultFontSize,\n    rtfDefaultLineHeight\n  ) =>\n    getBuilderContent(\n      false,\n      data,\n      rowData,\n      format,\n      textIndentNumSpaces,\n      htmlIndentWidth,\n      rowClassPrefix,\n      rtfDefaultFontSize,\n      rtfDefaultLineHeight\n    )\n);\n\nexport const getGeneratedCss = createSelector(\n  getRowData,\n  getHtmlIndentWidth,\n  getRowClassPrefix,\n  (rowData, indentWidth, classPrefix) => {\n    const lines = [];\n    const indentedRows = rowData.filter(({ indent }) => indent);\n\n    indentedRows.forEach((row, index) => {\n      lines.push(\n        `.${classPrefix}indent-${index + 1} { margin-left: ${indentWidth * index}px; }`\n      );\n    });\n\n    return lines.join('\\n');\n  }\n);\n\n// serializes all the relevant user settings into a simple JSON object for the user to save. This lets them\n// re-create the same settings later on rather than rely on local storage to remember it for them. When adding node\n// support this'll help as well.\nexport const getSettingsStr = createSelector(\n  getSortedRows,\n  getRows,\n  getFormat,\n  getTextIndentNumSpaces,\n  getHtmlIndentWidth,\n  getRowClassPrefix,\n  (\n    sortedRows,\n    rows,\n    format,\n    textIndentNumSpaces,\n    htmlIndentWidth,\n    rowClassPrefix\n  ) => {\n    const settings = {\n      rows: [],\n      format,\n      textIndentNumSpaces,\n      htmlIndentWidth,\n      rowClassPrefix,\n    };\n    sortedRows.forEach((rowId) => {\n      settings.rows.push(rows[rowId]);\n    });\n\n    return JSON.stringify(settings, null, '\\t');\n  }\n);\n\nexport const getRowSettings = createSelector(\n  getEditingRowId,\n  getRows,\n  (editingRowId, rows) => {\n    if (!editingRowId) {\n      return {};\n    }\n    return rows[editingRowId].settings;\n  }\n);\n\nexport const getSelectedRowColumn = createSelector(\n  getEditingRowId,\n  getRows,\n  getColumns,\n  (editingRowId, rows, columns) => {\n    if (!editingRowId) {\n      return '';\n    }\n    return columns[rows[editingRowId].colIndex];\n  }\n);\n\nexport const getRowArbitraryRegex = createSelector(\n  getEditingRowId,\n  getRows,\n  (editingRowId, rows) => {\n    if (!editingRowId) {\n      return {};\n    }\n    return rows[editingRowId].arbitraryRegex;\n  }\n);\n","import { debounce } from 'throttle-debounce';\nimport { showNotification } from '../../helpers/utils';\nimport { parseCsv } from '../../helpers/csv';\nimport {\n  validateRtfRow,\n  computeDocumentRowPlaceholders,\n} from '../../helpers/builder';\nimport { getFormat } from './settings.selectors';\n\nexport const SET_DATA = 'SET_DATA';\nexport const uploadFile = (file) => (dispatch) => {\n  parseCsv(file).then((resp) => {\n    // takes up some memory but this computes all the row placeholders for use during generation, which\n    // saves a bunch of work when generating the visible result\n    computeDocumentRowPlaceholders(resp.data);\n\n    dispatch({\n      type: SET_DATA,\n      payload: {\n        uploadedFilename: file.path,\n        data: resp.data,\n      },\n    });\n  });\n};\n\nexport const SET_PAGE_INDEX = 'SET_PAGE_INDEX';\nexport const setPageIndex = (pageIndex) => ({\n  type: SET_PAGE_INDEX,\n  payload: { pageIndex },\n});\n\nexport const SELECT_COLUMN = 'SELECT_COLUMN';\nexport const selectColumn = (rowId, colIndex) => ({\n  type: SELECT_COLUMN,\n  payload: { rowId, colIndex },\n});\n\nexport const ADD_ROW = 'ADD_ROW';\nexport const addRow = (rowSettings) => ({\n  type: ADD_ROW,\n  payload: { ...rowSettings },\n});\n\nexport const DELETE_ROW = 'DELETE_ROW';\nexport const deleteRow = (rowId) => ({ type: DELETE_ROW, payload: { rowId } });\n\nexport const CLEAR_ROWS = 'CLEAR_ROWS';\nexport const clearRows = () => ({ type: CLEAR_ROWS });\n\nexport const TOGGLE_ROW_INDENTATION = 'TOGGLE_ROW_INDENTATION';\nexport const toggleRowIndentation = (rowId) => ({\n  type: TOGGLE_ROW_INDENTATION,\n  payload: { rowId },\n});\n\nexport const SET_DOCUMENT_ROW_PLACEHOLDERS_GENERATED =\n  'SET_DOCUMENT_ROW_PLACEHOLDERS_GENERATED';\nexport const setDocumentRowPlaceholdersGenerated = () => ({\n  type: SET_DOCUMENT_ROW_PLACEHOLDERS_GENERATED,\n  payload: { value: true },\n});\n\nexport const UPDATE_ROW_FORMAT_ERROR = 'UPDATE_ROW_FORMAT_ERROR';\nexport const updateRowFormatError = debounce(\n  100,\n  (dispatch, rowId, format, generationFormat) => {\n    // right now we only validate RTF format\n    if (generationFormat !== 'rtf') {\n      return;\n    }\n\n    const errors = validateRtfRow(format);\n\n    dispatch({\n      type: UPDATE_ROW_FORMAT_ERROR,\n      payload: {\n        rowId,\n        errors,\n      },\n    });\n  }\n);\n\nexport const UPDATE_ROW_FORMAT = 'UPDATE_ROW_FORMAT';\nexport const updateRowFormat = (rowId, format) => (dispatch, getState) => {\n  const generationFormat = getFormat(getState());\n\n  updateRowFormatError(dispatch, rowId, format, generationFormat);\n\n  dispatch({\n    type: UPDATE_ROW_FORMAT,\n    payload: {\n      rowId,\n      format,\n    },\n  });\n};\n\nexport const SET_BUILDER_TAB = 'SET_BUILDER_TAB';\nexport const setBuilderTab = (tab) => ({\n  type: SET_BUILDER_TAB,\n  payload: { tab },\n});\n\nexport const RESET = 'RESET';\nexport const onReset = () => ({ type: 'RESET' });\n\nexport const PURGE = 'PURGE';\nexport const purge = () => ({ type: 'PURGE' });\n\nexport const CLEAR_SETTINGS_ERROR = 'CLEAR_SETTINGS_ERROR';\nexport const clearSettingsError = () => ({ type: CLEAR_SETTINGS_ERROR });\n\nexport const ERROR_PARSING_SETTINGS = 'ERROR_PARSING_SETTINGS';\nexport const errorParsingSettings = (error) => ({\n  type: ERROR_PARSING_SETTINGS,\n  payload: {\n    error,\n  },\n});\n\nexport const SET_SAVED_SETTINGS = 'SET_SAVED_SETTINGS';\nexport const setSavedSettings = (settings) => ({\n  type: SET_SAVED_SETTINGS,\n  payload: { ...settings },\n});\n\nexport const processSettings = (settingsStr) => (dispatch) => {\n  dispatch(clearSettingsError());\n\n  try {\n    const settings = JSON.parse(settingsStr);\n\n    // TODO The validation is totally feeble here. Better to define a schema for the settings and validate against that\n\n    if (settings.rows && Array.isArray(settings.rows)) {\n      dispatch(clearRows());\n      settings.rows.forEach((row) => {\n        if (\n          !row.hasOwnProperty('colIndex') ||\n          !row.hasOwnProperty('indent') ||\n          !row.hasOwnProperty('format')\n        ) {\n          return;\n        }\n        if (row.indent !== true && row.indent !== false) {\n          return;\n        }\n        dispatch(\n          addRow({\n            colIndex: row.colIndex,\n            indent: row.indent,\n            format: row.format,\n            settings: row.settings,\n            arbitraryRegex: row.arbitraryRegex,\n          })\n        );\n      });\n    }\n\n    if (\n      settings.format &&\n      ['html', 'rtf', 'text'].indexOf(settings.format) !== -1\n    ) {\n      dispatch(updateSetting('format', settings.format));\n    }\n    if (settings.textIndentNumSpaces) {\n      dispatch(\n        updateSetting('textIndentNumSpaces', settings.textIndentNumSpaces)\n      );\n    }\n    if (settings.htmlIndentWidth) {\n      dispatch(updateSetting('htmlIndentWidth', settings.htmlIndentWidth));\n    }\n    if (settings.rowClassPrefix) {\n      dispatch(updateSetting('rowClassPrefix', settings.rowClassPrefix));\n    }\n\n    dispatch(closeApplySettingsDialog());\n\n    showNotification('Done!', 'Your settings have been applied.');\n  } catch (e) {\n    dispatch(errorParsingSettings(e.message));\n  }\n};\n\nexport const OPEN_APPLY_SETTINGS_DIALOG = 'OPEN_APPLY_SETTINGS_DIALOG';\nexport const openApplySettingsDialog = () => ({\n  type: OPEN_APPLY_SETTINGS_DIALOG,\n});\n\nexport const CLOSE_APPLY_SETTINGS_DIALOG = 'CLOSE_APPLY_SETTINGS_DIALOG';\nexport const closeApplySettingsDialog = () => ({\n  type: CLOSE_APPLY_SETTINGS_DIALOG,\n});\n\nexport const OPEN_ROW_SETTINGS_DIALOG = 'OPEN_ROW_SETTINGS_DIALOG';\nexport const openRowSettingsDialog = (rowId) => ({\n  type: OPEN_ROW_SETTINGS_DIALOG,\n  payload: { rowId },\n});\n\nexport const CLOSE_ROW_SETTINGS_DIALOG = 'CLOSE_ROW_SETTINGS_DIALOG';\nexport const closeRowSettingsDialog = () => ({\n  type: CLOSE_ROW_SETTINGS_DIALOG,\n});\n\nexport const UPDATE_ROW_SETTINGS = 'UPDATE_ROW_SETTINGS';\nexport const updateRowSettings = (settings) => ({\n  type: UPDATE_ROW_SETTINGS,\n  payload: { settings },\n});\n\nexport const UPDATE_SETTING = 'UPDATE_SETTING';\nexport const updateSetting = (setting, value) => ({\n  type: UPDATE_SETTING,\n  payload: {\n    setting,\n    value,\n  },\n});\n\nexport const SET_AUTO_UPDATE = 'SET_AUTO_UPDATE';\nexport const setAutoUpdate = (enabled) => ({\n  type: SET_AUTO_UPDATE,\n  payload: { enabled },\n});\n\nexport const MANUAL_UPDATE = 'MANUAL_UPDATE';\nexport const manualUpdateDisplay = () => ({ type: MANUAL_UPDATE });\n\nexport const UPDATE_ARBITRARY_REGEX = 'UPDATE_ARBITRARY_REGEX';\nexport const updateArbitraryRegex = (regex) => ({\n  type: UPDATE_ARBITRARY_REGEX,\n  payload: { regex },\n});\n","import Papa from 'papaparse';\n\nexport const parseCsv = (file) => {\n  return new Promise((resolve) => {\n    Papa.parse(file, {\n      complete: (data) => resolve(data),\n    });\n  });\n};\n","export default {\n    GITHUB_URL: 'https://github.com/imerss/checklist-generator',\n\tAPP_STATE_VERSION: 2\n};\n","import { nanoid } from 'nanoid';\nimport * as actions from './settings.actions';\nimport { removeArrayItem } from '../../helpers/utils';\nimport C from '../../constants';\n\nconst initialState = {\n  // this option is used to empty redux-persist. Useful when there are breaking changes being rolled out so old\n  // configs don't crash the user's browser\n  appStateVersion: C.APP_STATE_VERSION,\n  pageIndex: 0,\n  uploadedFilename: '',\n  data: null,\n  rows: {},\n  sortedRows: [],\n  builderTab: 0,\n  autoUpdate: true,\n  format: 'html', // \"html\", \"text\", \"rtf\"\n  textIndentNumSpaces: 4,\n  htmlIndentWidth: 50,\n  rowClassPrefix: 'cg-col-',\n  rtfDefaultFontSize: 13,\n  rtfDefaultLineHeight: 80,\n  loadSettingsError: null,\n  applySettingsDialogOpen: false,\n  rowSettingsDialogOpen: false,\n  editingRowId: null, // for the row settings dialog\n  documentRowPlaceholdersGenerated: false,\n\n  // there's a better way to do this that I keep forgetting... need to imperatively update display panel when auto-update is disabled\n  regenerationCount: 0,\n};\n\nconst settingsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.PURGE:\n      return initialState;\n\n    // used when a user uploads a new file. Resets some of the settings, but not all\n    case actions.RESET: {\n      return {\n        ...state,\n        data: null,\n        autoUpdate: true,\n        uploadedFilename: '',\n        rows: {},\n        sortedRows: [],\n        builderTab: 0,\n        loadSettingsError: null,\n        applySettingsDialogOpen: false,\n        rowSettingsDialogOpen: false,\n        editingRowId: null,\n        regenerationCount: state.regenerationCount + 1,\n      };\n    }\n    case actions.SET_PAGE_INDEX:\n      return {\n        ...state,\n        pageIndex: action.payload.pageIndex,\n      };\n    case actions.SET_DATA:\n      return {\n        ...state,\n        uploadedFilename: action.payload.uploadedFilename,\n        data: action.payload.data,\n      };\n    case actions.SELECT_COLUMN: {\n      const { rowId, colIndex } = action.payload;\n\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [rowId]: {\n            ...state.rows[rowId],\n            colIndex,\n            settings: {},\n          },\n        },\n      };\n    }\n    case actions.ADD_ROW: {\n      const newRowSettings = {\n        colIndex: null,\n        indent: true,\n        errors: [],\n        format: '{{it.VALUE}}',\n        settings: {},\n        arbitraryRegex: [\n          { example: '', regex: '', replacement: '' },\n          { example: '', regex: '', replacement: '' },\n          { example: '', regex: '', replacement: '' },\n          { example: '', regex: '', replacement: '' },\n        ],\n        ...action.payload,\n      };\n\n      const newRowId = nanoid(6);\n      return {\n        ...state,\n        sortedRows: [...state.sortedRows, newRowId],\n        rows: {\n          ...state.rows,\n          [newRowId]: newRowSettings,\n        },\n      };\n    }\n    case actions.DELETE_ROW: {\n      const newSortedRows = removeArrayItem(\n        state.sortedRows,\n        action.payload.rowId\n      );\n      const newRows = { ...state.rows };\n      delete newRows[action.payload.rowId];\n\n      return {\n        ...state,\n        sortedRows: newSortedRows,\n        rows: newRows,\n      };\n    }\n    case actions.CLEAR_ROWS: {\n      return {\n        ...state,\n        sortedRows: [],\n        rows: {},\n      };\n    }\n    case actions.TOGGLE_ROW_INDENTATION: {\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [action.payload.rowId]: {\n            ...state.rows[action.payload.rowId],\n            indent: !state.rows[action.payload.rowId].indent,\n          },\n        },\n      };\n    }\n    case actions.UPDATE_ROW_FORMAT: {\n      const { rowId, format } = action.payload;\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [rowId]: {\n            ...state.rows[rowId],\n            format,\n          },\n        },\n      };\n    }\n    case actions.SET_BUILDER_TAB: {\n      return {\n        ...state,\n        builderTab: action.payload.tab,\n      };\n    }\n    case actions.UPDATE_SETTING: {\n      return {\n        ...state,\n        [action.payload.setting]: action.payload.value,\n      };\n    }\n    case actions.ERROR_PARSING_SETTINGS: {\n      return {\n        ...state,\n        loadSettingsError: action.payload.error,\n      };\n    }\n    case actions.CLEAR_SETTINGS_ERROR: {\n      return {\n        ...state,\n        loadSettingsError: null,\n      };\n    }\n    case actions.OPEN_APPLY_SETTINGS_DIALOG: {\n      return {\n        ...state,\n        applySettingsDialogOpen: true,\n      };\n    }\n    case actions.CLOSE_APPLY_SETTINGS_DIALOG: {\n      return {\n        ...state,\n        applySettingsDialogOpen: false,\n      };\n    }\n    case actions.OPEN_ROW_SETTINGS_DIALOG: {\n      return {\n        ...state,\n        rowSettingsDialogOpen: true,\n        editingRowId: action.payload.rowId,\n      };\n    }\n    case actions.CLOSE_ROW_SETTINGS_DIALOG: {\n      return {\n        ...state,\n        rowSettingsDialogOpen: false,\n      };\n    }\n    case actions.UPDATE_ROW_SETTINGS: {\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [state.editingRowId]: {\n            ...state.rows[state.editingRowId],\n            settings: action.payload.settings,\n          },\n        },\n      };\n    }\n    case actions.UPDATE_ROW_FORMAT_ERROR: {\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [action.payload.rowId]: {\n            ...state.rows[action.payload.rowId],\n            errors: action.payload.errors,\n          },\n        },\n      };\n    }\n    case actions.SET_AUTO_UPDATE: {\n      return {\n        ...state,\n        autoUpdate: action.payload.enabled,\n      };\n    }\n    case actions.MANUAL_UPDATE: {\n      return {\n        ...state,\n        regenerationCount: state.regenerationCount + 1,\n      };\n    }\n    case actions.UPDATE_ARBITRARY_REGEX: {\n      return {\n        ...state,\n        rows: {\n          ...state.rows,\n          [state.editingRowId]: {\n            ...state.rows[state.editingRowId],\n            arbitraryRegex: action.payload.regex,\n          },\n        },\n      };\n    }\n    case actions.SET_DOCUMENT_ROW_PLACEHOLDERS_GENERATED: {\n      return {\n        ...state,\n        documentRowPlaceholdersGenerated: action.payload.value,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default settingsReducer;\n","import Thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport settingsReducer from './settings/settings.reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['settings'],\n};\n\nconst settingsPersistConfig = {\n  key: 'settings',\n  storage,\n  blacklist: ['documentRowPlaceholdersGenerated'],\n};\n\nconst rootReducer = combineReducers({\n  settings: persistReducer(settingsPersistConfig, settingsReducer),\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\nconst store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(Thunk))\n);\n\nconst persistor = persistStore(store);\n\nexport default store;\nexport { persistor };\n","import React from 'react';\nimport MUIStepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nexport const Stepper = ({ steps, activeStep }) => (\n  <div className='navStepper'>\n    <MUIStepper activeStep={activeStep}>\n      {steps.map((label, index) => {\n        const stepProps = {};\n        const labelProps = {};\n        // if (isStepSkipped(index)) {\n        stepProps.completed = false;\n        // }\n        return (\n          <Step key={label} {...stepProps}>\n            <StepLabel {...labelProps}>{label}</StepLabel>\n          </Step>\n        );\n      })}\n    </MUIStepper>\n  </div>\n);\n","import React from 'react';\n\nconst TabPanel = ({ children, value, index }) => {\n  if (value !== index) {\n    return null;\n  }\n\n  return <div style={{ padding: '20px 0 0' }}>{children}</div>;\n};\n\nexport default TabPanel;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TabPanel from '../components/TabPanel';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\n\nexport const Step1 = ({ onNext }) => {\n  const [tab, setTab] = React.useState(0);\n\n  return (\n    <div>\n      <h1>Checklist Generator</h1>\n\n      <Tabs\n        value={tab}\n        indicatorColor='primary'\n        textColor='primary'\n        onChange={(e, newValue) => setTab(newValue)}\n      >\n        <Tab label='About' />\n        <Tab label='Features' />\n      </Tabs>\n      <TabPanel value={tab} index={0}>\n        <div className='introPanel'>\n          <div>\n            <p>\n              This is a simple, free online tool that{' '}\n              <i>takes a CSV file that looks like this...</i>\n            </p>\n            <img\n              src={`${process.env.PUBLIC_URL}/table.png`}\n              width={415}\n              height={252}\n              alt='Original CSV table format example'\n            />\n          </div>\n          <div>\n            <p>\n              and <i>converts it to a checklist that looks like this</i>...\n            </p>\n            <img\n              src={`${process.env.PUBLIC_URL}/checklist.png`}\n              width={230}\n              height={395}\n              alt='Generated checklist example'\n            />\n          </div>\n        </div>\n      </TabPanel>\n      <TabPanel value={tab} index={1}>\n        <ul>\n          <li>\n            Works on any CSV content that has the same format as shown in the\n            image on the About tab, where a column has a repeated value for all\n            children.\n          </li>\n          <li>\n            Lets you generate HTML, RTF (Rich Text Format) or plain text\n            checklists.\n          </li>\n          <li>\n            Allows you to extract and display only the column data you want.\n          </li>\n          <li>\n            Uses a templating language for generating the content, so you can\n            apply logic to output different row values based on your data set.\n          </li>\n          <li>\n            Stores your settings and data as you progress, so you won't lose\n            anything if you accidentally navigate away.\n          </li>\n          <li>Allows you to save your settings in a separate file.</li>\n          <li>\n            Various options for RTF generation such as font size, family and\n            line height to help you cut down on manual editing of the generated\n            code to make it look exactly how you want.\n          </li>\n          <li>\n            Option (RTF only) to run arbitrary rules on the data to format it\n            how you need.\n          </li>\n        </ul>\n      </TabPanel>\n\n      <Button variant='outlined' size='small' color='primary' onClick={onNext}>\n        Get Started &raquo;\n      </Button>\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step2 } from './Step2';\n\nconst mapStateToProps = (state) => ({\n  uploadedFilename: selectors.getUploadedFilename(state),\n  hasUploadedData: selectors.hasUploadedData(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onUploadFile: (file) => dispatch(actions.uploadFile(file)),\n  onReset: () => dispatch(actions.onReset()),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(Step2);\n\nexport default container;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useDropzone } from 'react-dropzone';\nimport './Page2.scss';\n\nexport const Step2 = ({\n  onPrev,\n  onNext,\n  uploadedFilename,\n  hasUploadedData,\n  onUploadFile,\n  onReset,\n}) => {\n  const onDrop = React.useCallback(\n    (files) => {\n      onUploadFile(files[0]);\n    },\n    [onUploadFile]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const getButtons = () => {\n    let continueButton = null;\n    if (hasUploadedData) {\n      continueButton = (\n        <Button\n          variant='outlined'\n          size='small'\n          color='primary'\n          onClick={onNext}\n        >\n          Continue &raquo;\n        </Button>\n      );\n    }\n\n    return (\n      <footer>\n        <Button\n          variant='outlined'\n          size='small'\n          color='secondary'\n          onClick={onPrev}\n          style={{ marginRight: 10, minWidth: 20 }}\n        >\n          &laquo;\n        </Button>\n        {continueButton}\n      </footer>\n    );\n  };\n\n  const getContent = () => {\n    if (hasUploadedData) {\n      return (\n        <p>\n          You have an uploaded file: <b>{uploadedFilename}</b> (data is stored\n          in your browser's local storage).{' '}\n          <span className='link' onClick={onReset}>\n            Click here to reset\n          </span>{' '}\n          and upload another.\n        </p>\n      );\n    }\n\n    return (\n      <>\n        <div className='dragDropUpload' {...getRootProps()}>\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the file here ...</p>\n          ) : (\n            <p>Drag and drop your file here, or click to select a file.</p>\n          )}\n        </div>\n\n        <p>\n          If you don't have a file on hand, you can use this{' '}\n          <a href='./demo-data.csv' target='_blank'>\n            demo file\n          </a>{' '}\n          that illustrates a typical compatible format.\n        </p>\n      </>\n    );\n  };\n\n  return (\n    <div>\n      {getContent()}\n      {getButtons()}\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport { ColumnDropdown } from './ColumnDropdown';\nimport * as selectors from '../../store/settings/settings.selectors';\n\nconst mapStateToProps = (state) => ({\n  columns: selectors.getColumns(state),\n});\nconst container = connect(mapStateToProps)(ColumnDropdown);\n\nexport default container;\n","import React from 'react';\n\nexport const ColumnDropdown = ({ value, columns, onChange }) => {\n  return (\n    <select\n      defaultValue={value}\n      onChange={(e) => onChange(parseInt(e.target.value))}\n    >\n      <option value=''>Please select</option>\n      {columns.map((columnName, index) => (\n        <option value={index} key={index}>\n          {columnName} (COL{index + 1})\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport './displayPanel.scss';\n\nconst DisplayPanel = ({\n  format,\n  autoUpdate,\n  setAutoUpdate,\n  manualUpdateDisplay,\n  content,\n}) => {\n  let panel;\n  const isRtf = format === 'rtf';\n\n  if (format === 'html' || isRtf) {\n    let classes = 'displayPanel';\n    if (format === 'rtf') {\n      classes += ' rtfFormat';\n    }\n    panel = (\n      <div className={classes} dangerouslySetInnerHTML={{ __html: content }} />\n    );\n  } else {\n    panel = <div className='displayPanel textFormat'>{content}</div>;\n  }\n\n  let rtfWarning = '';\n  if (isRtf) {\n    rtfWarning = (\n      <div className='rtfNote'>\n        Note: the display panel below is very limited for RTF since it's a very\n        different medium than HTML. It'll only show bold, italic, underline and\n        whatever info you add for each row. You'll need to actually check the\n        generated content to see how your checklist looks.\n      </div>\n    );\n  }\n  return (\n    <>\n      {rtfWarning}\n      <div className='autoUpdatePanel'>\n        <span>\n          <input\n            type='checkbox'\n            checked={autoUpdate}\n            id='toggleAutoUpdate'\n            onChange={() => setAutoUpdate(!autoUpdate)}\n          />\n          <label htmlFor='toggleAutoUpdate'>Auto-update display panel</label>\n        </span>\n        <Button\n          variant='contained'\n          disableElevation\n          size='small'\n          disabled={autoUpdate}\n          onClick={() => manualUpdateDisplay()}\n        >\n          Update\n        </Button>\n      </div>\n      {panel}\n    </>\n  );\n};\n\nexport default DisplayPanel;\n","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport DisplayPanel from './DisplayPanel';\n\nconst mapStateToProps = (state) => ({\n  format: selectors.getFormat(state),\n  content: selectors.getPreviewContent(state),\n  autoUpdate: selectors.shouldAutoUpdate(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAutoUpdate: (enabled) => dispatch(actions.setAutoUpdate(enabled)),\n  manualUpdateDisplay: () => dispatch(actions.manualUpdateDisplay()),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(DisplayPanel);\n\nexport default container;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport './RowSettingsDialog.scss';\n\nconst RowSettingsDialog = ({\n  selectedColumn,\n  onClose,\n  open,\n  rtfDefaultLineHeight,\n  rowSettings,\n  updateRowSettings,\n  arbitraryRegex,\n  updateArbitraryRegex,\n}) => {\n  const settings = {\n    rtfLineHeightUseDefault: true,\n    rtfLineHeight: '',\n    ...rowSettings,\n  };\n\n  const updateSettings = (setting, value) => {\n    updateRowSettings({\n      ...settings,\n      [setting]: value,\n    });\n  };\n\n  const updateArbRegex = (index, field, value) => {\n    const newData = [...arbitraryRegex];\n    newData[index][field] = value;\n    if (field === 'example') {\n      const [regex, replacement] = value.split('`');\n      newData[index].regex = regex;\n      newData[index].replacement = replacement;\n    }\n\n    updateArbitraryRegex(newData);\n  };\n\n  if (!selectedColumn) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      disableBackdropClick\n      onEscapeKeyDown={onClose}\n      aria-labelledby='confirmation-dialog-title'\n      maxWidth='md'\n      open={open}\n    >\n      <DialogTitle id='confirmation-dialog-title'>\n        RTF Row Settings: <i>{selectedColumn}</i>\n      </DialogTitle>\n      <DialogContent dividers>\n        <div className='builderSettings'>\n          <div>\n            <div className='settingsCol1'>Line height</div>\n            <div>\n              <input\n                type='radio'\n                id='lineHeightDefault'\n                checked={settings.rtfLineHeightUseDefault}\n                onChange={() => updateSettings('rtfLineHeightUseDefault', true)}\n              />\n              <label htmlFor='lineHeightDefault'>\n                Default ({rtfDefaultLineHeight})\n              </label>\n              <input\n                type='radio'\n                id='lineHeightCustom'\n                checked={!settings.rtfLineHeightUseDefault}\n                onChange={() =>\n                  updateSettings('rtfLineHeightUseDefault', false)\n                }\n              />\n              <label htmlFor='lineHeightCustom'>Custom: </label>\n              <input\n                type='number'\n                value={settings.rtfLineHeight}\n                checked={!settings.rtfLineHeightUseDefault}\n                style={{ width: 40 }}\n                onChange={(e) =>\n                  updateSettings('rtfLineHeight', e.target.value)\n                }\n              />\n            </div>\n          </div>\n        </div>\n\n        <h3>Arbitrary regex</h3>\n\n        <p>\n          This section lets you define arbitrary rules to be applied on the\n          placeholders used in this row, to make whatever conversions you want.\n          Basically they let you alter the content of your CSV cells rather than\n          just output them as-is. Note that these run <i>prior</i> to the HTML\n          parsing step, so you can add in <b>b</b>, <b>i</b> and other\n          compatible tags (see help tab in parent page).\n        </p>\n\n        <div className='arbitraryRegexTable'>\n          <div className='heading'>\n            <div className='col1'>Example</div>\n            <div className='col2'>Regex</div>\n            <div className='col3'>Replacement</div>\n          </div>\n          <div>\n            <div className='col1'>\n              <select\n                defaultValue={arbitraryRegex[0].example}\n                onChange={(e) => updateArbRegex(0, 'example', e.target.value)}\n              >\n                <option value=''>Please select</option>\n                <option value='\\bsp\\.`<noStyle>sp.</noStyle>'>\n                  Remove formatting from \"sp.\" string\n                </option>\n                <option value='\\bcf\\.\\s`<noStyle>cf. </noStyle>'>\n                  Remove formatting for \"cf.\" (confer/conferatur) string\n                </option>\n              </select>\n            </div>\n            <div className='col2'>\n              <input\n                type='text'\n                value={arbitraryRegex[0].regex}\n                onChange={(e) => updateArbRegex(0, 'regex', e.target.value)}\n              />\n            </div>\n            <div className='col3'>\n              <input\n                type='text'\n                value={arbitraryRegex[0].replacement}\n                onChange={(e) =>\n                  updateArbRegex(0, 'replacement', e.target.value)\n                }\n              />\n            </div>\n          </div>\n\n          <div>\n            <div className='col1'>\n              <select\n                defaultValue={arbitraryRegex[1].example}\n                onChange={(e) => updateArbRegex(1, 'example', e.target.value)}\n              >\n                <option value=''>Please select</option>\n                <option value='\\bsp\\.`<noStyle>sp.</noStyle>'>\n                  Remove formatting from \"sp.\" string\n                </option>\n                <option value='\\bcf\\.\\s`<noStyle>cf. </noStyle>'>\n                  Remove formatting for \"cf.\" (confer/conferatur) string\n                </option>\n              </select>\n            </div>\n            <div className='col2'>\n              <input\n                type='text'\n                value={arbitraryRegex[1].regex}\n                onChange={(e) => updateArbRegex(1, 'regex', e.target.value)}\n              />\n            </div>\n            <div className='col3'>\n              <input\n                type='text'\n                value={arbitraryRegex[1].replacement}\n                onChange={(e) =>\n                  updateArbRegex(1, 'replacement', e.target.value)\n                }\n              />\n            </div>\n          </div>\n\n          <div>\n            <div className='col1'>\n              <select\n                defaultValue={arbitraryRegex[2].example}\n                onChange={(e) => updateArbRegex(2, 'example', e.target.value)}\n              >\n                <option value=''>Please select</option>\n                <option value='\\bsp\\.`<noStyle>sp.</noStyle>'>\n                  Remove formatting from \"sp.\" string\n                </option>\n                <option value='\\bcf\\.\\s`<noStyle>cf. </noStyle>'>\n                  Remove formatting for \"cf.\" (confer/conferatur) string\n                </option>\n              </select>\n            </div>\n            <div className='col2'>\n              <input\n                type='text'\n                value={arbitraryRegex[2].regex}\n                onChange={(e) => updateArbRegex(2, 'regex', e.target.value)}\n              />\n            </div>\n            <div className='col3'>\n              <input\n                type='text'\n                value={arbitraryRegex[2].replacement}\n                onChange={(e) =>\n                  updateArbRegex(2, 'replacement', e.target.value)\n                }\n              />\n            </div>\n          </div>\n\n          <div>\n            <div className='col1'>\n              <select\n                defaultValue={arbitraryRegex[3].example}\n                onChange={(e) => updateArbRegex(3, 'example', e.target.value)}\n              >\n                <option value=''>Please select</option>\n                <option value='\\bsp\\.`<noStyle>sp.</noStyle>'>\n                  Remove formatting from \"sp.\" string\n                </option>\n                <option value='\\bcf\\.\\s`<noStyle>cf. </noStyle>'>\n                  Remove formatting for \"cf.\" (confer/conferatur) string\n                </option>\n              </select>\n            </div>\n            <div className='col2'>\n              <input\n                type='text'\n                value={arbitraryRegex[3].regex}\n                onChange={(e) => updateArbRegex(3, 'regex', e.target.value)}\n              />\n            </div>\n            <div className='col3'>\n              <input\n                type='text'\n                value={arbitraryRegex[3].replacement}\n                onChange={(e) =>\n                  updateArbRegex(3, 'replacement', e.target.value)\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color='primary'>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default RowSettingsDialog;\n","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport RowSettingsDialog from './RowSettingsDialog';\n\nconst mapStateToProps = (state) => ({\n  open: selectors.isRowSettingsDialogOpen(state),\n  rowSettings: selectors.getRowSettings(state),\n  selectedColumn: selectors.getSelectedRowColumn(state),\n  arbitraryRegex: selectors.getRowArbitraryRegex(state),\n  rtfDefaultLineHeight: selectors.getRtfDefaultLineHeight(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onClose: () => dispatch(actions.closeRowSettingsDialog()),\n  updateRowSettings: (settings) =>\n    dispatch(actions.updateRowSettings(settings)),\n  updateArbitraryRegex: (regex) =>\n    dispatch(actions.updateArbitraryRegex(regex)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RowSettingsDialog);\n","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport { BuilderTable } from './BuilderTable';\n\nconst mapStateToProps = (state) => ({\n  rows: selectors.getRowData(state),\n  format: selectors.getFormat(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAddRow: () => dispatch(actions.addRow()),\n  onDeleteRow: (rowId) => dispatch(actions.deleteRow(rowId)),\n  onSelectColumn: (rowId, colIndex) =>\n    dispatch(actions.selectColumn(rowId, colIndex)),\n  onToggleRowIndentation: (rowId) =>\n    dispatch(actions.toggleRowIndentation(rowId)),\n  onUpdateRowFormat: (rowId, rowFormat) =>\n    dispatch(actions.updateRowFormat(rowId, rowFormat)),\n  openRowSettingsDialog: (rowId) =>\n    dispatch(actions.openRowSettingsDialog(rowId)),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(BuilderTable);\n\nexport default container;\n","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ColumnDropdown from '../ColumnDropdown/ColumnDropdown.container';\nimport DisplayPanel from '../DisplayPanel/DisplayPanel.container';\nimport RowSettingsDialog from '../RowSettingsDialog/RowSettingsDialog.container';\nimport './BuilderTable.scss';\n\nexport const BuilderTable = ({\n  format,\n  rows,\n  onAddRow,\n  onDeleteRow,\n  onSelectColumn,\n  onToggleRowIndentation,\n  onUpdateRowFormat,\n  openRowSettingsDialog,\n}) => {\n  let rowElements = (\n    <p>Click the Add Row link below to start building your checklist.</p>\n  );\n\n  const getSettingsCol = (rowId) => {\n    if (format === 'rtf') {\n      return (\n        <div\n          className='rowSettings'\n          onClick={() => openRowSettingsDialog(rowId)}\n        >\n          <SettingsIcon style={{ fontSize: 20 }} />\n        </div>\n      );\n    }\n  };\n\n  if (rows.length) {\n    rowElements = rows.map(\n      ({ rowId, colIndex, format, errors, indent }, rowIndex) => {\n        const rowFieldClass =\n          !errors || errors.length === 0 ? '' : 'errorField';\n\n        return (\n          <div className='builderRow' key={rowIndex}>\n            <div className='colDropdown'>\n              <ColumnDropdown\n                value={colIndex}\n                onChange={(columnIndex) => onSelectColumn(rowId, columnIndex)}\n              />\n            </div>\n            <div className='indentCol'>\n              <input\n                type='checkbox'\n                checked={indent}\n                onChange={() => onToggleRowIndentation(rowId)}\n                id={`${rowId}-indent`}\n              />\n              <label htmlFor={`${rowId}-indent`}>Indent</label>\n            </div>\n            <div className='formatCol'>\n              <input\n                type='text'\n                value={format}\n                className={rowFieldClass}\n                onChange={(e) => {\n                  console.log(e.target.value);\n                  onUpdateRowFormat(rowId, e.target.value);\n                }}\n              />\n            </div>\n            {getSettingsCol(rowId)}\n            <div className='deleteRow' onClick={() => onDeleteRow(rowId)}>\n              <DeleteIcon style={{ fontSize: 20 }} />\n            </div>\n          </div>\n        );\n      }\n    );\n  }\n\n  return (\n    <>\n      <div className='builderTable'>{rowElements}</div>\n      <span\n        className='link'\n        onClick={(e) => {\n          e.preventDefault();\n          onAddRow();\n        }}\n      >\n        Add Row &raquo;\n      </span>\n\n      <DisplayPanel />\n      <RowSettingsDialog />\n    </>\n  );\n};\n","import React from 'react';\n\nconst Settings = ({\n  format,\n  onChangeSetting,\n  htmlIndentWidth,\n  rowClassPrefix,\n  textIndentNumSpaces,\n  rtfDefaultFontSize,\n  rtfDefaultLineHeight,\n}) => {\n  const getRows = () => {\n    let rows = [];\n    if (format === 'html') {\n      rows.push(\n        <div key='indentWidth'>\n          <div className='settingsCol1'>Indent width</div>\n          <div>\n            <input\n              type='number'\n              value={htmlIndentWidth}\n              style={{ width: 40 }}\n              onChange={(e) =>\n                onChangeSetting('htmlIndentWidth', e.target.value, 10)\n              }\n            />\n            px\n            <div className='tip'>\n              This is a convenience setting. Any builder rows where you check\n              the \"Indent\" checkbox will automatically get indented by this\n              amount, relative to the previous indented row. If you want{' '}\n              <i>different</i> levels of indentation for each row, don't check\n              the Indent checkboxes and instead supply your own HTML/CSS to do\n              the appropriate indentation.\n            </div>\n          </div>\n        </div>\n      );\n      rows.push(\n        <div key='rowClassPrefix'>\n          <div className='settingsCol1'>HTML class prefix</div>\n          <div>\n            <input\n              type='text'\n              value={rowClassPrefix}\n              onChange={(e) =>\n                onChangeSetting('rowClassPrefix', e.target.value)\n              }\n            />\n\n            <div className='tip'>\n              This applies a class to every row which you can use for your own\n              styling. Values from a particular column will be given a class for\n              that column, e.g. with a prefix value of\n              <b>cg-col-</b>, you'll see <b>cg-col-5</b> in the generated\n              content for all values from the 5th column. This value is also\n              used for indentation. Depending on which columns you select in the\n              builder table to be indented, they will get a{' '}\n              <b>cg-col-indent-N</b> class applied. That is what allows the\n              indentation styles to be applied.\n            </div>\n          </div>\n        </div>\n      );\n    }\n    if (format === 'text' || format === 'rtf') {\n      rows.push(\n        <div key='numCharIndent'>\n          <div className='settingsCol1'>Num character indent</div>\n          <div>\n            <input\n              type='number'\n              value={textIndentNumSpaces}\n              style={{ width: 40 }}\n              onChange={(e) =>\n                onChangeSetting('textIndentNumSpaces', e.target.value, 10)\n              }\n            />\n\n            <div className='tip'>\n              This is a convenience setting. Any builder rows where you check\n              the \"Indent\" checkbox will automatically get indented by this\n              number of characters, relative to the previous indented row. If\n              you want <i>different</i> levels of indentation for each row,\n              don't check those checkboxes. Instead, manually indent the rows\n              with however many number of spaces you want.\n            </div>\n          </div>\n        </div>\n      );\n    }\n    if (format === 'rtf') {\n      rows.push(\n        <div key='rtfDefaultFontSize'>\n          <div className='settingsCol1'>Default font size</div>\n          <div>\n            <input\n              type='number'\n              value={rtfDefaultFontSize}\n              style={{ width: 40 }}\n              onChange={(e) =>\n                onChangeSetting('rtfDefaultFontSize', e.target.value)\n              }\n            />{' '}\n            pt\n          </div>\n        </div>\n      );\n      rows.push(\n        <div key='rtfDefaultLineHeight'>\n          <div className='settingsCol1'>Default line height</div>\n          <div>\n            <input\n              type='number'\n              value={rtfDefaultLineHeight}\n              style={{ width: 40 }}\n              onChange={(e) =>\n                onChangeSetting('rtfDefaultLineHeight', e.target.value)\n              }\n            />\n          </div>\n        </div>\n      );\n    }\n\n    return rows;\n  };\n\n  const getFormatDesc = () => {\n    if (format === 'html') {\n      return (\n        <div className='tip'>\n          HTML format allows you to enter <i>any</i> HTML in the builder rows\n          and they'll be output as-is in the final generated HTML.\n        </div>\n      );\n    }\n\n    if (format === 'rtf') {\n      return (\n        <div className='tip'>\n          RTF stands for <i>Rich Text Format</i>. This is a format understood by\n          any rich-text editor like Word, Wordperfect, TextEdit and Open Office.\n          To keep formatting the content as simple as possible, you can still\n          enter HTML in the builder rows, but it will only convert a few tags.\n          See the help tag for more information.\n        </div>\n      );\n    }\n\n    if (format === 'text') {\n      return (\n        <div className='tip'>\n          This option outputs plain text - you cannot add any formatting rules\n          such as bold, italic, underline.\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className='builderSettings'>\n      <div>\n        <div className='settingsCol1'>Format</div>\n        <div>\n          <input\n            type='radio'\n            id='htmlFormat'\n            checked={format === 'html'}\n            onChange={() => onChangeSetting('format', 'html')}\n          />\n          <label htmlFor='htmlFormat'>HTML</label>\n          <input\n            type='radio'\n            id='rtfFormat'\n            checked={format === 'rtf'}\n            onChange={() => onChangeSetting('format', 'rtf')}\n          />\n          <label htmlFor='rtfFormat'>RTF</label>\n          <input\n            type='radio'\n            id='textFormat'\n            checked={format === 'text'}\n            onChange={() => onChangeSetting('format', 'text')}\n          />\n          <label htmlFor='textFormat'>Text</label>\n\n          {getFormatDesc()}\n        </div>\n      </div>\n      {getRows()}\n    </div>\n  );\n};\n\nexport default Settings;\n","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport Settings from './Settings';\n\nconst mapStateToProps = (state) => ({\n  format: selectors.getFormat(state),\n  textIndentNumSpaces: selectors.getTextIndentNumSpaces(state),\n  htmlIndentWidth: selectors.getHtmlIndentWidth(state),\n  rowClassPrefix: selectors.getRowClassPrefix(state),\n  rtfDefaultFontSize: selectors.getRtfDefaultFontSize(state),\n  rtfDefaultLineHeight: selectors.getRtfDefaultLineHeight(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChangeSetting: (settingName, value) =>\n    dispatch(actions.updateSetting(settingName, value)),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(Settings);\n\nexport default container;\n","import React from 'react';\n\nconst Help = () => (\n  <>\n    <div>\n      This page lets you build your checklist by choosing specific columns out\n      of your CSV file to be displayed. You have the choice of indenting each\n      column (using the indentation style you specify on the Settings tab) and\n      customizing the content of the rows however you want.\n    </div>\n\n    <h2>Placeholders</h2>\n    <p>\n      This application uses{' '}\n      <a\n        href='https://squirrelly.js.org/'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        SquirrellyJS\n      </a>{' '}\n      as the template engine. That's what allows you to enter{' '}\n      <i>placeholders</i> in the row fields, which get converted to the values\n      from your spreadsheet for that particular row. Here's a few tips:\n    </p>\n\n    <ul>\n      <li>\n        <b>{'{{it.VALUE}}'}</b> outputs the value of whatever column you've\n        selected in the dropdown for that row.\n      </li>\n      <li>\n        <b>{'{{it.COL1}}, {{it.COL2}}, {{it.COL3}}, ...'}</b> outputs the value\n        of values from <i>any</i> column from your spreadsheet. For convenience,\n        the dropdown lists the column numbers in parentheses, so they're easy to\n        find.\n      </li>\n      <li>\n        If you want to use simple boolean logic, like only output a value from\n        another field if it has a value, you can write:{' '}\n        <b>{'{{@if(it.COL5 !== \"none\")}}{{it.COL5}}{{/if}}'}</b>. Bit of a\n        mouthful, but that's how the template language works. Welcome to\n        programming!\n      </li>\n    </ul>\n\n    <h2>Display Panel</h2>\n\n    <p>\n      The purpose of the display panel is to give you an idea of what you're\n      generating. But to emphasize: it's\n      <i>merely an approximation</i> of what you're generating. HTML will look\n      different in whatever site you use it, and RTF content will look different\n      because it's being used in rich text editors\n    </p>\n    <p>\n      The <b>Auto-update display panel</b> option is checked by default. Any\n      time you add rows, edit them or change the default settings, the panel\n      will automatically refresh. But you may find this is rather slow depending\n      on the size of your data set and whatever settings you provide. As such,\n      you have the option of disabling it and just manually updating it. Note:\n      the <b>RTF</b> format is very time consuming to regenerate, so the\n      auto-update feature is unavailable.\n    </p>\n\n    <h2>Styling - HTML & RTF</h2>\n\n    <p>\n      If you're generating an HTML or RTF checklist you can style the content\n      (plain text is just plain text!). For HTML, enter whatever HTML content\n      you want around the placeholders, or use the class names that are\n      automatically added per row to style them afterwards. For RTF, you have\n      the the following options available. If you enter these HTML tags they\n      will be converted to their RTF equivalents:\n    </p>\n\n    <ul>\n      <li>\n        <b>bold</b> ({'<b>'}) - regular bold HTML tags are converted to RTF bold\n        tags.\n      </li>\n      <li>\n        <b>italic</b> ({'<i>'})\n      </li>\n      <li>\n        <b>underline</b> ({'<u>'})\n      </li>\n      <li>\n        <b>line breaks</b> ({'<br>'}) - this <i>works</i> but you might want to\n        just consider adding a custom line height for the row (click on the\n        settings icon on the row to override the default value)\n      </li>\n      <li>\n        <b>font</b> ({'<font>'}) - even though the HTML font tag has been\n        deprecated, this app brings it back <i>legacy style</i>! It's actually\n        just an easy-to-understand way to control the font for a particular\n        section of your row. It only currently accepts the \"size\" attribute (in\n        pt), so can be used like this:\n        <b>{`<font size=\"20\">...</font>`}</b>\n      </li>\n      <li>\n        <b>noStyle</b> ({'<noStyle>'}) - this tag removes italic, bold and\n        underline for a section of content. Usage:{' '}\n        <b>{`<noStyle>...</noStyle>`}</b>\n      </li>\n    </ul>\n  </>\n);\n\nexport default Help;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport './ApplySettingsDialog.scss';\n\nconst ApplySettingsDialogWrapper = ({\n  dialogOpen,\n  error,\n  openDialog,\n  closeDialog,\n  processSettings,\n}) => {\n  const [settings, setSettings] = React.useState('');\n\n  const showError = () => {\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <div className='error'>\n        There was an error parsing your saved settings: {error}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Button\n        variant='outlined'\n        size='small'\n        color='default'\n        onClick={openDialog}\n      >\n        Load Saved Settings\n      </Button>\n\n      <Dialog\n        disableBackdropClick\n        onEscapeKeyDown={closeDialog}\n        aria-labelledby='confirmation-dialog-title'\n        maxWidth='md'\n        open={dialogOpen}\n      >\n        <DialogTitle id='confirmation-dialog-title'>\n          Load Saved Settings\n        </DialogTitle>\n        <DialogContent dividers>\n          <div>\n            If you have some saved settings from a previous session and wish to\n            apply them now, paste them into the field below.\n          </div>\n\n          {showError()}\n\n          <textarea\n            autoFocus\n            className='applySettingsField'\n            onChange={(e) => setSettings(e.target.value)}\n            value={settings}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => processSettings(settings)} color='primary'>\n            Process\n          </Button>\n          <Button onClick={closeDialog} color='primary'>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ApplySettingsDialogWrapper;\n","import { connect } from 'react-redux';\nimport * as actions from '../../store/settings/settings.actions';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport ApplySettingsDialog from './ApplySettingsDialog';\n\nconst mapStateToProps = (state) => ({\n  dialogOpen: selectors.isApplySettingsDialogOpen(state),\n  error: selectors.getSettingsError(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  processSettings: (settingsStr) =>\n    dispatch(actions.processSettings(settingsStr)),\n  openDialog: () => dispatch(actions.openApplySettingsDialog()),\n  closeDialog: () => dispatch(actions.closeApplySettingsDialog()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ApplySettingsDialog);\n","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step3 } from './Step3';\n\nconst mapStateToProps = (state) => ({\n  hasUploadedData: selectors.hasUploadedData(state),\n  builderTab: selectors.getBuilderTab(state),\n  formatLabel: selectors.getFormatLabel(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onUploadFile: (file) => dispatch(actions.uploadFile(file)),\n  setBuilderTab: (tab) => dispatch(actions.setBuilderTab(tab)),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(Step3);\n\nexport default container;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport BuilderTable from '../components/BuilderTable/BuilderTable.container';\nimport Settings from '../components/BuilderTable/Settings.container';\nimport Help from '../components/BuilderTable/Help';\nimport TabPanel from '../components/TabPanel';\nimport ApplySettingsDialog from '../components/ApplySettingsDialog/ApplySettingsDialog.container';\nimport './Page3.scss';\n\nexport const Step3 = ({\n  onPrev,\n  onNext,\n  builderTab,\n  formatLabel,\n  setBuilderTab,\n}) => (\n  <>\n    <h1 className='builderStepTitle'>{formatLabel} checklist</h1>\n\n    <Tabs\n      value={builderTab}\n      indicatorColor='primary'\n      textColor='primary'\n      onChange={(e, newValue) => setBuilderTab(newValue)}\n    >\n      <Tab label='Build' />\n      <Tab label='Settings' />\n      <Tab label='Help' />\n    </Tabs>\n    <TabPanel value={builderTab} index={0}>\n      <BuilderTable />\n      <footer>\n        <Button\n          variant='outlined'\n          size='small'\n          color='secondary'\n          onClick={onPrev}\n          style={{ marginRight: 10, minWidth: 20 }}\n        >\n          &laquo;\n        </Button>\n        <Button\n          variant='outlined'\n          size='small'\n          color='primary'\n          onClick={onNext}\n        >\n          Continue &raquo;\n        </Button>\n      </footer>\n    </TabPanel>\n    <TabPanel value={builderTab} index={1}>\n      <Settings />\n      <br />\n      <ApplySettingsDialog />\n    </TabPanel>\n    <TabPanel value={builderTab} index={2}>\n      <Help />\n    </TabPanel>\n  </>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { showNotification } from '../../helpers/utils';\n\nconst CopyToClipboardBtn = ({ content }) => {\n  const onCopy = () => {\n    showNotification('Copied!', 'The text has been copied to your clipboard.');\n  };\n\n  return (\n    <CopyToClipboard text={content} onCopy={() => onCopy()}>\n      <Button\n        variant='contained'\n        disableElevation\n        size='small'\n        color='primary'\n        startIcon={<FileCopy />}\n      >\n        Copy to clipboard\n      </Button>\n    </CopyToClipboard>\n  );\n};\n\nexport default CopyToClipboardBtn;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport GetApp from '@material-ui/icons/GetApp';\nimport { downloadFile } from '../../helpers/builder';\n\nconst DownloadContentBtn = ({ content, style = {} }) => {\n  const onClick = () => {\n    downloadFile(content, 'checklist.rtf', 'rtf');\n  };\n\n  return (\n    <Button\n      variant='contained'\n      disableElevation\n      size='small'\n      color='primary'\n      startIcon={<GetApp />}\n      onClick={onClick}\n      style={style}\n    >\n      Download\n    </Button>\n  );\n};\n\nexport default DownloadContentBtn;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport CopyToClipboardBtn from '../CopyToClipboard/CopyToClipboardBtn';\nimport './SettingsDialog.scss';\n\nconst SettingsDialog = ({ onClose, open, settingsStr }) => (\n  <Dialog\n    disableBackdropClick\n    onEscapeKeyDown={onClose}\n    aria-labelledby='confirmation-dialog-title'\n    maxWidth='md'\n    open={open}\n  >\n    <DialogTitle id='confirmation-dialog-title'>Save Settings</DialogTitle>\n    <DialogContent dividers>\n      <div>\n        This application stores your latest settings in your browser's memory\n        (local storage), so when you return to this site they'll all be\n        remembered. But what if you revisit this site from a different browser\n        or computer? Or what if your browser's memory gets wiped? Tragedy! Your\n        settings will be lost and you'll need to configure it all over again.\n        The section below generates a simple JSON formatted version of the\n        settings you've entered in the UI. You may want to back these up\n        somewhere. When you come back, you can optionally re-enter them on Step\n        3.\n      </div>\n\n      <div className='settingsDisplay'>{settingsStr}</div>\n\n      <CopyToClipboardBtn content={settingsStr} />\n    </DialogContent>\n    <DialogActions>\n      <Button autoFocus onClick={onClose} color='primary'>\n        Close\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default SettingsDialog;\n","import { connect } from 'react-redux';\nimport * as selectors from '../../store/settings/settings.selectors';\nimport Settings from './SettingsDialog';\n\nconst mapStateToProps = (state) => ({\n  settingsStr: selectors.getSettingsStr(state),\n});\n\nexport default connect(mapStateToProps)(Settings);\n","import { connect } from 'react-redux';\nimport * as selectors from '../store/settings/settings.selectors';\nimport { Step4 } from './Step4';\n\nconst mapStateToProps = (state) => ({\n  format: selectors.getFormat(state),\n  generatedContent: selectors.getGeneratedContent(state),\n  generatedCss: selectors.getGeneratedCss(state),\n});\n\nconst mapDispatchToProps = () => ({});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(Step4);\n\nexport default container;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TabPanel from '../components/TabPanel';\nimport CopyToClipboardBtn from '../components/CopyToClipboard/CopyToClipboardBtn';\nimport DownloadContentBtn from '../components/DownloadContentBtn/DownloadContentBtn';\nimport SettingsDialog from '../components/SettingsDialog/SettingsDialog.container';\nimport './Page4.scss';\n\nexport const Step4 = ({\n  onPrev,\n  onReturn,\n  format,\n  generatedContent,\n  generatedCss,\n}) => {\n  const [tab, setTab] = React.useState(0);\n  const [settingsDialogOpen, setSettingsDialogVisibility] =\n    React.useState(false);\n\n  const getContent = () => {\n    if (format === 'html') {\n      const fullPageContent = `<html>\n<head>\n<style type=\"text/css\">\n${generatedCss}\n</style>\n</head>\n<body>\n${generatedContent}\n</body>\n</html>`;\n\n      return (\n        <>\n          <p>\n            The tabs below contain your HTML and CSS for embedding your\n            checklist into your own websites.\n          </p>\n\n          <Tabs\n            value={tab}\n            indicatorColor='primary'\n            textColor='primary'\n            onChange={(e, newValue) => setTab(newValue)}\n          >\n            <Tab label='HTML' />\n            <Tab label='CSS' />\n            <Tab label='Single HTML page' />\n          </Tabs>\n          <TabPanel value={tab} index={0}>\n            <div className='generatePanel'>{generatedContent}</div>\n            <div style={{ float: 'right' }}>\n              <CopyToClipboardBtn content={generatedContent} />\n            </div>\n          </TabPanel>\n          <TabPanel value={tab} index={1}>\n            <div className='generatePanel'>{generatedCss}</div>\n            <div style={{ float: 'right' }}>\n              <CopyToClipboardBtn content={generatedCss} />\n            </div>\n          </TabPanel>\n          <TabPanel value={tab} index={2}>\n            <div className='generatePanel'>{fullPageContent}</div>\n            <div style={{ float: 'right' }}>\n              <CopyToClipboardBtn content={fullPageContent} />\n            </div>\n          </TabPanel>\n        </>\n      );\n    }\n\n    let button = <CopyToClipboardBtn content={generatedContent} />;\n    if (format === 'rtf') {\n      button = <DownloadContentBtn content={generatedContent} />;\n    }\n\n    return (\n      <>\n        <p>The panel below contains your generated content.</p>\n\n        <div className='generatePanel'>{generatedContent}</div>\n        <div style={{ float: 'right' }}>{button}</div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <h1>Done!</h1>\n\n      {getContent()}\n\n      <SettingsDialog\n        open={settingsDialogOpen}\n        onClose={() => setSettingsDialogVisibility(false)}\n      />\n\n      <br />\n      <footer>\n        <Button\n          variant='outlined'\n          size='small'\n          color='secondary'\n          onClick={onPrev}\n          style={{ marginRight: 10, minWidth: 20 }}\n        >\n          &laquo;\n        </Button>\n        <Button\n          variant='outlined'\n          size='small'\n          color='primary'\n          onClick={onReturn}\n        >\n          Start again\n        </Button>\n        <span className='buttonDivider'>|</span>\n\n        <Button\n          variant='outlined'\n          size='small'\n          color='default'\n          onClick={() => setSettingsDialogVisibility(true)}\n        >\n          Save Settings\n        </Button>\n      </footer>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport PlaylistAddCheckIcon from '@material-ui/icons/ListAltTwoTone';\nimport { Stepper } from '../components/Stepper';\nimport { Step1 } from './Step1';\nimport Step2 from './Step2.container';\nimport Step3 from './Step3.container';\nimport Step4 from './Step4.container';\nimport C from '../constants';\nimport { computeDocumentRowPlaceholders } from '../helpers/builder';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: ['Open Sans', 'sans-serif'].join(','),\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'flex',\n  },\n}));\n\nconst steps = ['Start', 'Upload file', 'Build checklist', 'Generate'];\n\nconst Page = ({\n  data,\n  pageIndex,\n  setPageIndex,\n  setDocumentRowPlaceholdersGenerated,\n}) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (data) {\n      computeDocumentRowPlaceholders(data);\n      setDocumentRowPlaceholdersGenerated();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  const getContent = () => {\n    if (pageIndex === 0) {\n      return <Step1 onNext={() => setPageIndex(pageIndex + 1)} />;\n    } else if (pageIndex === 1) {\n      return (\n        <Step2\n          onPrev={() => setPageIndex(pageIndex - 1)}\n          onNext={() => setPageIndex(pageIndex + 1)}\n        />\n      );\n    } else if (pageIndex === 2) {\n      return (\n        <Step3\n          onPrev={() => setPageIndex(pageIndex - 1)}\n          onNext={() => setPageIndex(pageIndex + 1)}\n        />\n      );\n    } else if (pageIndex === 3) {\n      return (\n        <Step4\n          onPrev={() => setPageIndex(pageIndex - 1)}\n          onReturn={() => setPageIndex(pageIndex - 3)}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <AppBar position='fixed' className='appBar'>\n          <Toolbar>\n            <Typography variant='h6' className={classes.title}>\n              <PlaylistAddCheckIcon className='headingIcon' />\n              Checklist Generator\n            </Typography>\n            <div>\n              <IconButton\n                aria-label='github'\n                className={classes.margin}\n                onClick={() => window.open(C.GITHUB_URL, '_blank')}\n              >\n                <GitHubIcon />\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n        <div className='app'>\n          <Stepper steps={steps} activeStep={pageIndex} />\n          {getContent()}\n        </div>\n      </>\n    </ThemeProvider>\n  );\n};\n\nexport default Page;\n","import { connect } from 'react-redux';\nimport * as actions from '../store/settings/settings.actions';\nimport * as selectors from '../store/settings/settings.selectors';\nimport Page from './Page';\n\nconst mapStateToProps = (state) => ({\n  pageIndex: selectors.getPageIndex(state),\n  data: selectors.getData(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPageIndex: (pageIndex) => dispatch(actions.setPageIndex(pageIndex)),\n  setDocumentRowPlaceholdersGenerated: () =>\n    dispatch(actions.setDocumentRowPlaceholdersGenerated()),\n});\n\nconst container = connect(mapStateToProps, mapDispatchToProps)(Page);\n\nexport default container;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport ReactNotification from \"react-notifications-component\";\nimport store, { persistor } from './store';\nimport * as actions from './store/settings/settings.actions';\nimport * as selectors from './store/settings/settings.selectors';\nimport C from './constants';\nimport Page from './pages/Page.container';\nimport \"./css/global.scss\";\nimport 'react-notifications-component/dist/theme.css';\nimport 'animate.css/animate.compat.css';\n\nconst checkState = async (state) => {\n\tconst lastAppStateVersion = selectors.getAppStateVersion(state.getState());\n\tif (lastAppStateVersion !== C.APP_STATE_VERSION) {\n\t\tawait state.dispatch(actions.purge());\n\t}\n};\n\nconst App = () => (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor} onBeforeLift={() => checkState(store, persistor)}>\n            <ReactNotification />\n            <Page />\n        </PersistGate>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}